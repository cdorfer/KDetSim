//
// File generated by C:\SoftTools\root\\bin\rootcint.EXE at Thu Nov 17 13:43:11 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME KDetSimDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
#include "KDetSimDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void KField_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KField(void *p = 0);
   static void *newArray_KField(Long_t size, void *p);
   static void delete_KField(void *p);
   static void deleteArray_KField(void *p);
   static void destruct_KField(void *p);
   static void streamer_KField(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::KField*)
   {
      ::KField *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KField >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KField", ::KField::Class_Version(), "C:/users/Gregor/delo/SisDet/inc/KField.h", 23,
                  typeid(::KField), DefineBehavior(ptr, ptr),
                  &::KField::Dictionary, isa_proxy, 0,
                  sizeof(::KField) );
      instance.SetNew(&new_KField);
      instance.SetNewArray(&newArray_KField);
      instance.SetDelete(&delete_KField);
      instance.SetDeleteArray(&deleteArray_KField);
      instance.SetDestructor(&destruct_KField);
      instance.SetStreamerFunc(&streamer_KField);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::KField*)
   {
      return GenerateInitInstanceLocal((::KField*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KField*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void KMaterial_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KMaterial(void *p = 0);
   static void *newArray_KMaterial(Long_t size, void *p);
   static void delete_KMaterial(void *p);
   static void deleteArray_KMaterial(void *p);
   static void destruct_KMaterial(void *p);
   static void streamer_KMaterial(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::KMaterial*)
   {
      ::KMaterial *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KMaterial >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KMaterial", ::KMaterial::Class_Version(), "C:/users/Gregor/delo/SisDet/inc/KMaterial.h", 28,
                  typeid(::KMaterial), DefineBehavior(ptr, ptr),
                  &::KMaterial::Dictionary, isa_proxy, 0,
                  sizeof(::KMaterial) );
      instance.SetNew(&new_KMaterial);
      instance.SetNewArray(&newArray_KMaterial);
      instance.SetDelete(&delete_KMaterial);
      instance.SetDeleteArray(&deleteArray_KMaterial);
      instance.SetDestructor(&destruct_KMaterial);
      instance.SetStreamerFunc(&streamer_KMaterial);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::KMaterial*)
   {
      return GenerateInitInstanceLocal((::KMaterial*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KMaterial*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void KStruct_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KStruct(void *p = 0);
   static void *newArray_KStruct(Long_t size, void *p);
   static void delete_KStruct(void *p);
   static void deleteArray_KStruct(void *p);
   static void destruct_KStruct(void *p);
   static void streamer_KStruct(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::KStruct*)
   {
      ::KStruct *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KStruct >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KStruct", ::KStruct::Class_Version(), "C:/users/Gregor/delo/SisDet/inc/KStruct.h", 27,
                  typeid(::KStruct), DefineBehavior(ptr, ptr),
                  &::KStruct::Dictionary, isa_proxy, 0,
                  sizeof(::KStruct) );
      instance.SetNew(&new_KStruct);
      instance.SetNewArray(&newArray_KStruct);
      instance.SetDelete(&delete_KStruct);
      instance.SetDeleteArray(&deleteArray_KStruct);
      instance.SetDestructor(&destruct_KStruct);
      instance.SetStreamerFunc(&streamer_KStruct);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::KStruct*)
   {
      return GenerateInitInstanceLocal((::KStruct*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KStruct*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void KGeometry_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KGeometry(void *p = 0);
   static void *newArray_KGeometry(Long_t size, void *p);
   static void delete_KGeometry(void *p);
   static void deleteArray_KGeometry(void *p);
   static void destruct_KGeometry(void *p);
   static void streamer_KGeometry(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::KGeometry*)
   {
      ::KGeometry *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KGeometry >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KGeometry", ::KGeometry::Class_Version(), "C:/users/Gregor/delo/SisDet/inc/KGeometry.h", 9,
                  typeid(::KGeometry), DefineBehavior(ptr, ptr),
                  &::KGeometry::Dictionary, isa_proxy, 0,
                  sizeof(::KGeometry) );
      instance.SetNew(&new_KGeometry);
      instance.SetNewArray(&newArray_KGeometry);
      instance.SetDelete(&delete_KGeometry);
      instance.SetDeleteArray(&deleteArray_KGeometry);
      instance.SetDestructor(&destruct_KGeometry);
      instance.SetStreamerFunc(&streamer_KGeometry);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::KGeometry*)
   {
      return GenerateInitInstanceLocal((::KGeometry*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KGeometry*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void KDetector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KDetector(void *p = 0);
   static void *newArray_KDetector(Long_t size, void *p);
   static void delete_KDetector(void *p);
   static void deleteArray_KDetector(void *p);
   static void destruct_KDetector(void *p);
   static void streamer_KDetector(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::KDetector*)
   {
      ::KDetector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KDetector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KDetector", ::KDetector::Class_Version(), "C:/users/Gregor/delo/SisDet/inc/KDetector.h", 40,
                  typeid(::KDetector), DefineBehavior(ptr, ptr),
                  &::KDetector::Dictionary, isa_proxy, 0,
                  sizeof(::KDetector) );
      instance.SetNew(&new_KDetector);
      instance.SetNewArray(&newArray_KDetector);
      instance.SetDelete(&delete_KDetector);
      instance.SetDeleteArray(&deleteArray_KDetector);
      instance.SetDestructor(&destruct_KDetector);
      instance.SetStreamerFunc(&streamer_KDetector);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::KDetector*)
   {
      return GenerateInitInstanceLocal((::KDetector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KDetector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void KPad_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KPad(void *p = 0);
   static void *newArray_KPad(Long_t size, void *p);
   static void delete_KPad(void *p);
   static void deleteArray_KPad(void *p);
   static void destruct_KPad(void *p);
   static void streamer_KPad(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::KPad*)
   {
      ::KPad *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KPad >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KPad", ::KPad::Class_Version(), "C:/users/Gregor/delo/SisDet/inc/KPad.h", 29,
                  typeid(::KPad), DefineBehavior(ptr, ptr),
                  &::KPad::Dictionary, isa_proxy, 0,
                  sizeof(::KPad) );
      instance.SetNew(&new_KPad);
      instance.SetNewArray(&newArray_KPad);
      instance.SetDelete(&delete_KPad);
      instance.SetDeleteArray(&deleteArray_KPad);
      instance.SetDestructor(&destruct_KPad);
      instance.SetStreamerFunc(&streamer_KPad);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::KPad*)
   {
      return GenerateInitInstanceLocal((::KPad*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KPad*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void K3D_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_K3D(void *p);
   static void deleteArray_K3D(void *p);
   static void destruct_K3D(void *p);
   static void streamer_K3D(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::K3D*)
   {
      ::K3D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::K3D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("K3D", ::K3D::Class_Version(), "C:/users/Gregor/delo/SisDet/inc/K3D.h", 25,
                  typeid(::K3D), DefineBehavior(ptr, ptr),
                  &::K3D::Dictionary, isa_proxy, 0,
                  sizeof(::K3D) );
      instance.SetDelete(&delete_K3D);
      instance.SetDeleteArray(&deleteArray_K3D);
      instance.SetDestructor(&destruct_K3D);
      instance.SetStreamerFunc(&streamer_K3D);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::K3D*)
   {
      return GenerateInitInstanceLocal((::K3D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::K3D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void KPixel_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_KPixel(void *p);
   static void deleteArray_KPixel(void *p);
   static void destruct_KPixel(void *p);
   static void streamer_KPixel(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::KPixel*)
   {
      ::KPixel *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KPixel >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KPixel", ::KPixel::Class_Version(), "C:/users/Gregor/delo/SisDet/inc/KPixel.h", 23,
                  typeid(::KPixel), DefineBehavior(ptr, ptr),
                  &::KPixel::Dictionary, isa_proxy, 0,
                  sizeof(::KPixel) );
      instance.SetDelete(&delete_KPixel);
      instance.SetDeleteArray(&deleteArray_KPixel);
      instance.SetDestructor(&destruct_KPixel);
      instance.SetStreamerFunc(&streamer_KPixel);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::KPixel*)
   {
      return GenerateInitInstanceLocal((::KPixel*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KPixel*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void KStrip_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KStrip(void *p = 0);
   static void *newArray_KStrip(Long_t size, void *p);
   static void delete_KStrip(void *p);
   static void deleteArray_KStrip(void *p);
   static void destruct_KStrip(void *p);
   static void streamer_KStrip(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::KStrip*)
   {
      ::KStrip *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KStrip >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KStrip", ::KStrip::Class_Version(), "C:/users/Gregor/delo/SisDet/inc/KStrip.h", 18,
                  typeid(::KStrip), DefineBehavior(ptr, ptr),
                  &::KStrip::Dictionary, isa_proxy, 0,
                  sizeof(::KStrip) );
      instance.SetNew(&new_KStrip);
      instance.SetNewArray(&newArray_KStrip);
      instance.SetDelete(&delete_KStrip);
      instance.SetDeleteArray(&deleteArray_KStrip);
      instance.SetDestructor(&destruct_KStrip);
      instance.SetStreamerFunc(&streamer_KStrip);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::KStrip*)
   {
      return GenerateInitInstanceLocal((::KStrip*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KStrip*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void KMesh_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_KMesh(void *p);
   static void deleteArray_KMesh(void *p);
   static void destruct_KMesh(void *p);
   static void streamer_KMesh(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::KMesh*)
   {
      ::KMesh *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KMesh >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KMesh", ::KMesh::Class_Version(), "C:/users/Gregor/delo/SisDet/inc/KMesh.h", 17,
                  typeid(::KMesh), DefineBehavior(ptr, ptr),
                  &::KMesh::Dictionary, isa_proxy, 0,
                  sizeof(::KMesh) );
      instance.SetDelete(&delete_KMesh);
      instance.SetDeleteArray(&deleteArray_KMesh);
      instance.SetDestructor(&destruct_KMesh);
      instance.SetStreamerFunc(&streamer_KMesh);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::KMesh*)
   {
      return GenerateInitInstanceLocal((::KMesh*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KMesh*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void KImplant3D_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_KImplant3D(void *p);
   static void deleteArray_KImplant3D(void *p);
   static void destruct_KImplant3D(void *p);
   static void streamer_KImplant3D(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::KImplant3D*)
   {
      ::KImplant3D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KImplant3D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KImplant3D", ::KImplant3D::Class_Version(), "C:/users/Gregor/delo/SisDet/inc/KImplant3D.h", 17,
                  typeid(::KImplant3D), DefineBehavior(ptr, ptr),
                  &::KImplant3D::Dictionary, isa_proxy, 0,
                  sizeof(::KImplant3D) );
      instance.SetDelete(&delete_KImplant3D);
      instance.SetDeleteArray(&deleteArray_KImplant3D);
      instance.SetDestructor(&destruct_KImplant3D);
      instance.SetStreamerFunc(&streamer_KImplant3D);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::KImplant3D*)
   {
      return GenerateInitInstanceLocal((::KImplant3D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KImplant3D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void KImplant2D_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_KImplant2D(void *p);
   static void deleteArray_KImplant2D(void *p);
   static void destruct_KImplant2D(void *p);
   static void streamer_KImplant2D(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::KImplant2D*)
   {
      ::KImplant2D *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KImplant2D >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KImplant2D", ::KImplant2D::Class_Version(), "C:/users/Gregor/delo/SisDet/inc/KImplant2D.h", 17,
                  typeid(::KImplant2D), DefineBehavior(ptr, ptr),
                  &::KImplant2D::Dictionary, isa_proxy, 0,
                  sizeof(::KImplant2D) );
      instance.SetDelete(&delete_KImplant2D);
      instance.SetDeleteArray(&deleteArray_KImplant2D);
      instance.SetDestructor(&destruct_KImplant2D);
      instance.SetStreamerFunc(&streamer_KImplant2D);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::KImplant2D*)
   {
      return GenerateInitInstanceLocal((::KImplant2D*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KImplant2D*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *KField::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *KField::Class_Name()
{
   return "KField";
}

//______________________________________________________________________________
const char *KField::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::KField*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KField::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::KField*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KField::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::KField*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KField::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::KField*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *KMaterial::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *KMaterial::Class_Name()
{
   return "KMaterial";
}

//______________________________________________________________________________
const char *KMaterial::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::KMaterial*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KMaterial::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::KMaterial*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KMaterial::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::KMaterial*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KMaterial::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::KMaterial*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *KStruct::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *KStruct::Class_Name()
{
   return "KStruct";
}

//______________________________________________________________________________
const char *KStruct::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::KStruct*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KStruct::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::KStruct*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KStruct::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::KStruct*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KStruct::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::KStruct*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *KGeometry::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *KGeometry::Class_Name()
{
   return "KGeometry";
}

//______________________________________________________________________________
const char *KGeometry::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::KGeometry*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KGeometry::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::KGeometry*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KGeometry::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::KGeometry*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KGeometry::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::KGeometry*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *KDetector::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *KDetector::Class_Name()
{
   return "KDetector";
}

//______________________________________________________________________________
const char *KDetector::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::KDetector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KDetector::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::KDetector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KDetector::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::KDetector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KDetector::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::KDetector*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *KPad::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *KPad::Class_Name()
{
   return "KPad";
}

//______________________________________________________________________________
const char *KPad::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::KPad*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KPad::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::KPad*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KPad::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::KPad*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KPad::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::KPad*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *K3D::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *K3D::Class_Name()
{
   return "K3D";
}

//______________________________________________________________________________
const char *K3D::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::K3D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int K3D::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::K3D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void K3D::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::K3D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *K3D::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::K3D*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *KPixel::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *KPixel::Class_Name()
{
   return "KPixel";
}

//______________________________________________________________________________
const char *KPixel::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::KPixel*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KPixel::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::KPixel*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KPixel::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::KPixel*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KPixel::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::KPixel*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *KStrip::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *KStrip::Class_Name()
{
   return "KStrip";
}

//______________________________________________________________________________
const char *KStrip::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::KStrip*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KStrip::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::KStrip*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KStrip::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::KStrip*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KStrip::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::KStrip*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *KMesh::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *KMesh::Class_Name()
{
   return "KMesh";
}

//______________________________________________________________________________
const char *KMesh::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::KMesh*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KMesh::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::KMesh*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KMesh::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::KMesh*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KMesh::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::KMesh*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *KImplant3D::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *KImplant3D::Class_Name()
{
   return "KImplant3D";
}

//______________________________________________________________________________
const char *KImplant3D::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::KImplant3D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KImplant3D::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::KImplant3D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KImplant3D::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::KImplant3D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KImplant3D::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::KImplant3D*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *KImplant2D::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *KImplant2D::Class_Name()
{
   return "KImplant2D";
}

//______________________________________________________________________________
const char *KImplant2D::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::KImplant2D*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KImplant2D::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::KImplant2D*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KImplant2D::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::KImplant2D*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KImplant2D::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::KImplant2D*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void KStruct::Streamer(TBuffer &R__b)
{
   // Stream an object of class KStruct.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> PCharge;
      R__b >> Steps;
      R__b >> DStrip;
      R__b >> Xlenght;
      R__b >> Ylenght;
      R__b >> Zlenght;
      R__b >> TTime;
      R__b >> TCharge;
      R__b.ReadStaticArray((float*)Xtrack);
      R__b.ReadStaticArray((float*)Ytrack);
      R__b.ReadStaticArray((float*)Ztrack);
      R__b.ReadStaticArray((float*)Charge);
      R__b.ReadStaticArray((float*)Time);
      R__b.ReadStaticArray((float*)Efield);
      R__b.ReadStaticArray((float*)MulCar);
      R__b.CheckByteCount(R__s, R__c, KStruct::IsA());
   } else {
      R__c = R__b.WriteVersion(KStruct::IsA(), kTRUE);
      R__b << PCharge;
      R__b << Steps;
      R__b << DStrip;
      R__b << Xlenght;
      R__b << Ylenght;
      R__b << Zlenght;
      R__b << TTime;
      R__b << TCharge;
      R__b.WriteArray(Xtrack, 10001);
      R__b.WriteArray(Ytrack, 10001);
      R__b.WriteArray(Ztrack, 10001);
      R__b.WriteArray(Charge, 10001);
      R__b.WriteArray(Time, 10001);
      R__b.WriteArray(Efield, 10001);
      R__b.WriteArray(MulCar, 10001);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void KStruct::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KStruct.
      typedef ::KStruct msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PCharge", &PCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Steps", &Steps);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DStrip", &DStrip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Xlenght", &Xlenght);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Ylenght", &Ylenght);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Zlenght", &Zlenght);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TTime", &TTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TCharge", &TCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Xtrack[10001]", Xtrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Ytrack[10001]", Ytrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Ztrack[10001]", Ztrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Charge[10001]", Charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Time[10001]", Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Efield[10001]", Efield);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MulCar[10001]", MulCar);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_KStruct(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::KStruct : new ::KStruct;
   }
   static void *newArray_KStruct(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::KStruct[nElements] : new ::KStruct[nElements];
   }
   // Wrapper around operator delete
   static void delete_KStruct(void *p) {
      delete ((::KStruct*)p);
   }
   static void deleteArray_KStruct(void *p) {
      delete [] ((::KStruct*)p);
   }
   static void destruct_KStruct(void *p) {
      typedef ::KStruct current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KStruct(TBuffer &buf, void *obj) {
      ((::KStruct*)obj)->::KStruct::Streamer(buf);
   }
} // end of namespace ROOT for class ::KStruct

//______________________________________________________________________________
void KPad::Streamer(TBuffer &R__b)
{
   // Stream an object of class KPad.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      KDetector::Streamer(R__b);
      PhyPot.Streamer(R__b);
      PhyField.Streamer(R__b);
      R__b >> Neff;
      R__b >> CellY;
      R__b >> CellX;
      R__b.CheckByteCount(R__s, R__c, KPad::IsA());
   } else {
      R__c = R__b.WriteVersion(KPad::IsA(), kTRUE);
      KDetector::Streamer(R__b);
      PhyPot.Streamer(R__b);
      PhyField.Streamer(R__b);
      R__b << Neff;
      R__b << CellY;
      R__b << CellX;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void KPad::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KPad.
      typedef ::KPad msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PhyPot", &PhyPot);
      R__insp.InspectMember(PhyPot, "PhyPot.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PhyField", &PhyField);
      R__insp.InspectMember(PhyField, "PhyField.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Neff", &Neff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CellY", &CellY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CellX", &CellX);
      KDetector::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_KPad(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::KPad : new ::KPad;
   }
   static void *newArray_KPad(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::KPad[nElements] : new ::KPad[nElements];
   }
   // Wrapper around operator delete
   static void delete_KPad(void *p) {
      delete ((::KPad*)p);
   }
   static void deleteArray_KPad(void *p) {
      delete [] ((::KPad*)p);
   }
   static void destruct_KPad(void *p) {
      typedef ::KPad current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KPad(TBuffer &buf, void *obj) {
      ((::KPad*)obj)->::KPad::Streamer(buf);
   }
} // end of namespace ROOT for class ::KPad

//______________________________________________________________________________
void KDetector::Streamer(TBuffer &R__b)
{
   // Stream an object of class KDetector.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      KGeometry::Streamer(R__b);
      KMaterial::Streamer(R__b);
      R__b >> Deps;
      R__b >> ran;
      R__b >> CalErr;
      R__b >> MaxIter;
      R__b >> Debug;
      R__b >> Voltage;
      R__b >> Voltage2;
      Voltages.Streamer(R__b);
      R__b >> NeffF;
      R__b >> NeffH;
      Ramo.Streamer(R__b);
      Real.Streamer(R__b);
      R__b.ReadStaticArray((float*)B);
      R__b >> taue;
      R__b >> tauh;
      R__b >> BreakDown;
      R__b >> MTresh;
      R__b >> BDTresh;
      R__b.ReadStaticArray((float*)enp);
      R__b.ReadStaticArray((float*)exp);
      R__b >> diff;
      R__b >> average;
      R__b >> SStep;
      R__b >> pos;
      R__b >> neg;
      R__b >> sum;
      R__b.CheckByteCount(R__s, R__c, KDetector::IsA());
   } else {
      R__c = R__b.WriteVersion(KDetector::IsA(), kTRUE);
      KGeometry::Streamer(R__b);
      KMaterial::Streamer(R__b);
      R__b << Deps;
      R__b << ran;
      R__b << CalErr;
      R__b << MaxIter;
      R__b << Debug;
      R__b << Voltage;
      R__b << Voltage2;
      Voltages.Streamer(R__b);
      R__b << NeffF;
      R__b << (TObject*)NeffH;
      Ramo.Streamer(R__b);
      Real.Streamer(R__b);
      R__b.WriteArray(B, 3);
      R__b << taue;
      R__b << tauh;
      R__b << BreakDown;
      R__b << MTresh;
      R__b << BDTresh;
      R__b.WriteArray(enp, 3);
      R__b.WriteArray(exp, 3);
      R__b << diff;
      R__b << average;
      R__b << SStep;
      R__b << (TObject*)pos;
      R__b << (TObject*)neg;
      R__b << (TObject*)sum;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void KDetector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KDetector.
      typedef ::KDetector msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Deps", &Deps);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ran", &ran);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CalErr", &CalErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MaxIter", &MaxIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Debug", &Debug);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Voltage", &Voltage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Voltage2", &Voltage2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Voltages", &Voltages);
      R__insp.InspectMember(Voltages, "Voltages.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*NeffF", &NeffF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*NeffH", &NeffH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Ramo", &Ramo);
      R__insp.InspectMember(Ramo, "Ramo.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Real", &Real);
      R__insp.InspectMember(Real, "Real.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "B[3]", B);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "taue", &taue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tauh", &tauh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BreakDown", &BreakDown);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MTresh", &MTresh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BDTresh", &BDTresh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "enp[3]", enp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "exp[3]", exp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "diff", &diff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "average", &average);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SStep", &SStep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pos", &pos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*neg", &neg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sum", &sum);
      KGeometry::ShowMembers(R__insp);
      KMaterial::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_KDetector(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::KDetector : new ::KDetector;
   }
   static void *newArray_KDetector(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::KDetector[nElements] : new ::KDetector[nElements];
   }
   // Wrapper around operator delete
   static void delete_KDetector(void *p) {
      delete ((::KDetector*)p);
   }
   static void deleteArray_KDetector(void *p) {
      delete [] ((::KDetector*)p);
   }
   static void destruct_KDetector(void *p) {
      typedef ::KDetector current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KDetector(TBuffer &buf, void *obj) {
      ((::KDetector*)obj)->::KDetector::Streamer(buf);
   }
} // end of namespace ROOT for class ::KDetector

//______________________________________________________________________________
void KGeometry::Streamer(TBuffer &R__b)
{
   // Stream an object of class KGeometry.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> EG;
      R__b >> DM;
      R__b >> nx;
      R__b >> ny;
      R__b >> nz;
      R__b.CheckByteCount(R__s, R__c, KGeometry::IsA());
   } else {
      R__c = R__b.WriteVersion(KGeometry::IsA(), kTRUE);
      R__b << (TObject*)EG;
      R__b << (TObject*)DM;
      R__b << nx;
      R__b << ny;
      R__b << nz;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void KGeometry::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KGeometry.
      typedef ::KGeometry msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*EG", &EG);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*DM", &DM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nx", &nx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ny", &ny);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nz", &nz);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_KGeometry(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::KGeometry : new ::KGeometry;
   }
   static void *newArray_KGeometry(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::KGeometry[nElements] : new ::KGeometry[nElements];
   }
   // Wrapper around operator delete
   static void delete_KGeometry(void *p) {
      delete ((::KGeometry*)p);
   }
   static void deleteArray_KGeometry(void *p) {
      delete [] ((::KGeometry*)p);
   }
   static void destruct_KGeometry(void *p) {
      typedef ::KGeometry current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KGeometry(TBuffer &buf, void *obj) {
      ((::KGeometry*)obj)->::KGeometry::Streamer(buf);
   }
} // end of namespace ROOT for class ::KGeometry

//______________________________________________________________________________
void KMaterial::Streamer(TBuffer &R__b)
{
   // Stream an object of class KMaterial.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b.CheckByteCount(R__s, R__c, KMaterial::IsA());
   } else {
      R__c = R__b.WriteVersion(KMaterial::IsA(), kTRUE);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void KMaterial::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KMaterial.
      typedef ::KMaterial msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_KMaterial(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::KMaterial : new ::KMaterial;
   }
   static void *newArray_KMaterial(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::KMaterial[nElements] : new ::KMaterial[nElements];
   }
   // Wrapper around operator delete
   static void delete_KMaterial(void *p) {
      delete ((::KMaterial*)p);
   }
   static void deleteArray_KMaterial(void *p) {
      delete [] ((::KMaterial*)p);
   }
   static void destruct_KMaterial(void *p) {
      typedef ::KMaterial current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KMaterial(TBuffer &buf, void *obj) {
      ((::KMaterial*)obj)->::KMaterial::Streamer(buf);
   }
} // end of namespace ROOT for class ::KMaterial

//______________________________________________________________________________
void KField::Streamer(TBuffer &R__b)
{
   // Stream an object of class KField.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> Method;
      R__b >> dim;
      R__b >> U;
      R__b >> Ex;
      R__b >> Ey;
      R__b >> Ez;
      R__b >> E;
      R__b.CheckByteCount(R__s, R__c, KField::IsA());
   } else {
      R__c = R__b.WriteVersion(KField::IsA(), kTRUE);
      R__b << Method;
      R__b << dim;
      R__b << (TObject*)U;
      R__b << (TObject*)Ex;
      R__b << (TObject*)Ey;
      R__b << (TObject*)Ez;
      R__b << (TObject*)E;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void KField::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KField.
      typedef ::KField msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Method", &Method);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dim", &dim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*U", &U);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Ex", &Ex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Ey", &Ey);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Ez", &Ez);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*E", &E);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_KField(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::KField : new ::KField;
   }
   static void *newArray_KField(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::KField[nElements] : new ::KField[nElements];
   }
   // Wrapper around operator delete
   static void delete_KField(void *p) {
      delete ((::KField*)p);
   }
   static void deleteArray_KField(void *p) {
      delete [] ((::KField*)p);
   }
   static void destruct_KField(void *p) {
      typedef ::KField current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KField(TBuffer &buf, void *obj) {
      ((::KField*)obj)->::KField::Streamer(buf);
   }
} // end of namespace ROOT for class ::KField

//______________________________________________________________________________
void KStrip::Streamer(TBuffer &R__b)
{
   // Stream an object of class KStrip.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      KDetector::Streamer(R__b);
      R__b >> Pitch;
      R__b >> Width;
      R__b >> Depth;
      R__b >> CellX;
      R__b >> CellY;
      R__b >> NoStrips;
      R__b >> RamoStrip;
      R__b.CheckByteCount(R__s, R__c, KStrip::IsA());
   } else {
      R__c = R__b.WriteVersion(KStrip::IsA(), kTRUE);
      KDetector::Streamer(R__b);
      R__b << Pitch;
      R__b << Width;
      R__b << Depth;
      R__b << CellX;
      R__b << CellY;
      R__b << NoStrips;
      R__b << RamoStrip;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void KStrip::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KStrip.
      typedef ::KStrip msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Pitch", &Pitch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Width", &Width);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Depth", &Depth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CellX", &CellX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CellY", &CellY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NoStrips", &NoStrips);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RamoStrip", &RamoStrip);
      KDetector::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_KStrip(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::KStrip : new ::KStrip;
   }
   static void *newArray_KStrip(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::KStrip[nElements] : new ::KStrip[nElements];
   }
   // Wrapper around operator delete
   static void delete_KStrip(void *p) {
      delete ((::KStrip*)p);
   }
   static void deleteArray_KStrip(void *p) {
      delete [] ((::KStrip*)p);
   }
   static void destruct_KStrip(void *p) {
      typedef ::KStrip current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KStrip(TBuffer &buf, void *obj) {
      ((::KStrip*)obj)->::KStrip::Streamer(buf);
   }
} // end of namespace ROOT for class ::KStrip

//______________________________________________________________________________
void KPixel::Streamer(TBuffer &R__b)
{
   // Stream an object of class KPixel.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      KDetector::Streamer(R__b);
      R__b >> Pix;
      R__b >> CellZ;
      R__b >> CellX;
      R__b >> CellY;
      delete [] PSx;
      PSx = new Float_t[Pix];
      R__b.ReadFastArray(PSx,Pix);
      delete [] PSy;
      PSy = new Float_t[Pix];
      R__b.ReadFastArray(PSy,Pix);
      delete [] PSWx;
      PSWx = new Float_t[Pix];
      R__b.ReadFastArray(PSWx,Pix);
      delete [] PSWy;
      PSWy = new Float_t[Pix];
      R__b.ReadFastArray(PSWy,Pix);
      delete [] PSd;
      PSd = new Float_t[Pix];
      R__b.ReadFastArray(PSd,Pix);
      delete [] PSW;
      PSW = new Short_t[Pix];
      R__b.ReadFastArray(PSW,Pix);
      R__b.CheckByteCount(R__s, R__c, KPixel::IsA());
   } else {
      R__c = R__b.WriteVersion(KPixel::IsA(), kTRUE);
      KDetector::Streamer(R__b);
      R__b << Pix;
      R__b << CellZ;
      R__b << CellX;
      R__b << CellY;
      R__b.WriteFastArray(PSx,Pix);
      R__b.WriteFastArray(PSy,Pix);
      R__b.WriteFastArray(PSWx,Pix);
      R__b.WriteFastArray(PSWy,Pix);
      R__b.WriteFastArray(PSd,Pix);
      R__b.WriteFastArray(PSW,Pix);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void KPixel::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KPixel.
      typedef ::KPixel msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Pix", &Pix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CellZ", &CellZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CellX", &CellX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CellY", &CellY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*PSx", &PSx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*PSy", &PSy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*PSWx", &PSWx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*PSWy", &PSWy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*PSd", &PSd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*PSW", &PSW);
      KDetector::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_KPixel(void *p) {
      delete ((::KPixel*)p);
   }
   static void deleteArray_KPixel(void *p) {
      delete [] ((::KPixel*)p);
   }
   static void destruct_KPixel(void *p) {
      typedef ::KPixel current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KPixel(TBuffer &buf, void *obj) {
      ((::KPixel*)obj)->::KPixel::Streamer(buf);
   }
} // end of namespace ROOT for class ::KPixel

//______________________________________________________________________________
void KMesh::Streamer(TBuffer &R__b)
{
   // Stream an object of class KMesh.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> N;
      R__b >> Max;
      R__b >> Min;
      R__b.CheckByteCount(R__s, R__c, KMesh::IsA());
   } else {
      R__c = R__b.WriteVersion(KMesh::IsA(), kTRUE);
      R__b << N;
      R__b << Max;
      R__b << Min;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void KMesh::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KMesh.
      typedef ::KMesh msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "N", &N);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Max", &Max);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Min", &Min);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_KMesh(void *p) {
      delete ((::KMesh*)p);
   }
   static void deleteArray_KMesh(void *p) {
      delete [] ((::KMesh*)p);
   }
   static void destruct_KMesh(void *p) {
      typedef ::KMesh current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KMesh(TBuffer &buf, void *obj) {
      ((::KMesh*)obj)->::KMesh::Streamer(buf);
   }
} // end of namespace ROOT for class ::KMesh

//______________________________________________________________________________
void K3D::Streamer(TBuffer &R__b)
{
   // Stream an object of class K3D.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      KDetector::Streamer(R__b);
      R__b >> Col;
      R__b >> CellZ;
      R__b >> CellX;
      R__b >> CellY;
      delete [] PosD;
      PosD = new Float_t[Col];
      R__b.ReadFastArray(PosD,Col);
      delete [] PosX;
      PosX = new Float_t[Col];
      R__b.ReadFastArray(PosX,Col);
      delete [] PosY;
      PosY = new Float_t[Col];
      R__b.ReadFastArray(PosY,Col);
      delete [] PosR;
      PosR = new Float_t[Col];
      R__b.ReadFastArray(PosR,Col);
      delete [] PosW;
      PosW = new Short_t[Col];
      R__b.ReadFastArray(PosW,Col);
      delete [] PosM;
      PosM = new Short_t[Col];
      R__b.ReadFastArray(PosM,Col);
      R__b.CheckByteCount(R__s, R__c, K3D::IsA());
   } else {
      R__c = R__b.WriteVersion(K3D::IsA(), kTRUE);
      KDetector::Streamer(R__b);
      R__b << Col;
      R__b << CellZ;
      R__b << CellX;
      R__b << CellY;
      R__b.WriteFastArray(PosD,Col);
      R__b.WriteFastArray(PosX,Col);
      R__b.WriteFastArray(PosY,Col);
      R__b.WriteFastArray(PosR,Col);
      R__b.WriteFastArray(PosW,Col);
      R__b.WriteFastArray(PosM,Col);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void K3D::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class K3D.
      typedef ::K3D msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Col", &Col);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CellZ", &CellZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CellX", &CellX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CellY", &CellY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*PosD", &PosD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*PosX", &PosX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*PosY", &PosY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*PosR", &PosR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*PosW", &PosW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*PosM", &PosM);
      KDetector::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_K3D(void *p) {
      delete ((::K3D*)p);
   }
   static void deleteArray_K3D(void *p) {
      delete [] ((::K3D*)p);
   }
   static void destruct_K3D(void *p) {
      typedef ::K3D current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_K3D(TBuffer &buf, void *obj) {
      ((::K3D*)obj)->::K3D::Streamer(buf);
   }
} // end of namespace ROOT for class ::K3D

//______________________________________________________________________________
void KImplant3D::Streamer(TBuffer &R__b)
{
   // Stream an object of class KImplant3D.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b.ReadStaticArray((double*)Dim);
      R__b >> fConc;
      R__b.CheckByteCount(R__s, R__c, KImplant3D::IsA());
   } else {
      R__c = R__b.WriteVersion(KImplant3D::IsA(), kTRUE);
      R__b.WriteArray(Dim, 6);
      R__b << fConc;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void KImplant3D::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KImplant3D.
      typedef ::KImplant3D msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Dim[6]", Dim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fConc", &fConc);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_KImplant3D(void *p) {
      delete ((::KImplant3D*)p);
   }
   static void deleteArray_KImplant3D(void *p) {
      delete [] ((::KImplant3D*)p);
   }
   static void destruct_KImplant3D(void *p) {
      typedef ::KImplant3D current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KImplant3D(TBuffer &buf, void *obj) {
      ((::KImplant3D*)obj)->::KImplant3D::Streamer(buf);
   }
} // end of namespace ROOT for class ::KImplant3D

//______________________________________________________________________________
void KImplant2D::Streamer(TBuffer &R__b)
{
   // Stream an object of class KImplant2D.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b.ReadStaticArray((double*)Dim);
      R__b >> fConc;
      R__b.CheckByteCount(R__s, R__c, KImplant2D::IsA());
   } else {
      R__c = R__b.WriteVersion(KImplant2D::IsA(), kTRUE);
      R__b.WriteArray(Dim, 3);
      R__b << fConc;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void KImplant2D::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KImplant2D.
      typedef ::KImplant2D msvc_bug_workaround;
      TClass *R__cl = msvc_bug_workaround::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Dim[3]", Dim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fConc", &fConc);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_KImplant2D(void *p) {
      delete ((::KImplant2D*)p);
   }
   static void deleteArray_KImplant2D(void *p) {
      delete [] ((::KImplant2D*)p);
   }
   static void destruct_KImplant2D(void *p) {
      typedef ::KImplant2D current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KImplant2D(TBuffer &buf, void *obj) {
      ((::KImplant2D*)obj)->::KImplant2D::Streamer(buf);
   }
} // end of namespace ROOT for class ::KImplant2D

/********************************************************
* KDetSimDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableKDetSimDict();

extern "C" void G__set_cpp_environmentKDetSimDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("C:\\users\\Gregor\\delo\\SisDet\\inc\\KPad.h");
  G__add_compiledheader("C:\\users\\Gregor\\delo\\SisDet\\inc\\K3D.h");
  G__add_compiledheader("C:\\users\\Gregor\\delo\\SisDet\\inc\\KPixel.h");
  G__add_compiledheader("C:\\users\\Gregor\\delo\\SisDet\\inc\\KStruct.h");
  G__add_compiledheader("C:\\users\\Gregor\\delo\\SisDet\\inc\\KDetector.h");
  G__add_compiledheader("C:\\users\\Gregor\\delo\\SisDet\\inc\\KField.h");
  G__add_compiledheader("C:\\users\\Gregor\\delo\\SisDet\\inc\\KGeometry.h");
  G__add_compiledheader("C:\\users\\Gregor\\delo\\SisDet\\inc\\KMaterial.h");
  G__add_compiledheader("C:\\users\\Gregor\\delo\\SisDet\\inc\\KStrip.h");
  G__add_compiledheader("C:\\users\\Gregor\\delo\\SisDet\\inc\\KMesh.h");
  G__add_compiledheader("C:\\users\\Gregor\\delo\\SisDet\\inc\\KImplant3D.h");
  G__add_compiledheader("C:\\users\\Gregor\\delo\\SisDet\\inc\\KImplant2D.h");
  G__cpp_reset_tagtableKDetSimDict();
}
#include <new>
extern "C" int G__cpp_dllrevKDetSimDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* KField */
static int G__KDetSimDict_368_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KField* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KField[n];
     } else {
       p = new((void*) gvp) KField[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KField;
     } else {
       p = new((void*) gvp) KField;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KField));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KField*) G__getstructoffset())->CalFieldXYZ((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KField*) G__getstructoffset())->CalFieldXYZ((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((KField*) G__getstructoffset())->CalPotXYZ((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) KField::GetFieldPoint((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((KField*) G__getstructoffset())->CalField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((KField*) G__getstructoffset())->GetDim());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KField*) G__getstructoffset())->Mobility((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KField*) G__getstructoffset())->Mobility(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((KField*) G__getstructoffset())->DriftVelocity((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((KField*) G__getstructoffset())->DriftVelocity(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((KField*) G__getstructoffset())->Draw((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((KField*) G__getstructoffset())->Draw((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((KField*) G__getstructoffset())->Draw((Char_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) KField::alpha((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) KField::beta((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((KField*) G__getstructoffset())->M((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KField::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KField::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KField::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KField::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KField*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KField*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KField*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KField*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KField::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KField::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KField::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_368_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KField::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__KDetSimDict_368_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KField* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KField(*(KField*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KField));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KField G__TKField;
static int G__KDetSimDict_368_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KField*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KField*) (soff+(sizeof(KField)*i)))->~G__TKField();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KField*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KField*) (soff))->~G__TKField();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__KDetSimDict_368_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KField* dest = (KField*) G__getstructoffset();
   *dest = *(KField*) libp->para[0].ref;
   const KField& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KMaterial */
static int G__KDetSimDict_417_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KMaterial* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KMaterial[n];
     } else {
       p = new((void*) gvp) KMaterial[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KMaterial;
     } else {
       p = new((void*) gvp) KMaterial;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KMaterial));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_417_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) KMaterial::dEdx((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_417_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) KMaterial::dEX((Double_t) G__double(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_417_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) KMaterial::Perm((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) KMaterial::Perm());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_417_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) KMaterial::Rho());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_417_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KMaterial::MobMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_417_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KMaterial::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_417_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KMaterial::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_417_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KMaterial::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_417_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KMaterial::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_417_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KMaterial*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_417_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KMaterial*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_417_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KMaterial*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_417_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KMaterial*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_417_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KMaterial::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_417_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KMaterial::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_417_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KMaterial::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_417_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KMaterial::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__KDetSimDict_417_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KMaterial* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KMaterial(*(KMaterial*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KMaterial));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KMaterial G__TKMaterial;
static int G__KDetSimDict_417_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KMaterial*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KMaterial*) (soff+(sizeof(KMaterial)*i)))->~G__TKMaterial();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KMaterial*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KMaterial*) (soff))->~G__TKMaterial();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__KDetSimDict_417_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KMaterial* dest = (KMaterial*) G__getstructoffset();
   *dest = *(KMaterial*) libp->para[0].ref;
   const KMaterial& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KStruct */
static int G__KDetSimDict_418_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KStruct* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KStruct[n];
     } else {
       p = new((void*) gvp) KStruct[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KStruct;
     } else {
       p = new((void*) gvp) KStruct;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KStruct));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_418_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KStruct*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_418_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KStruct*) G__getstructoffset())->Info();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_418_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KStruct*) G__getstructoffset())->Draw((Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_418_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((KStruct*) G__getstructoffset())->GetCH((TH1F*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((KStruct*) G__getstructoffset())->GetCH((TH1F*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((KStruct*) G__getstructoffset())->GetCH((TH1F*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KStruct*) G__getstructoffset())->GetCH((TH1F*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_418_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 102, (double) ((KStruct*) G__getstructoffset())->GetCHMult((TH1F*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 102, (double) ((KStruct*) G__getstructoffset())->GetCHMult((TH1F*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 102, (double) ((KStruct*) G__getstructoffset())->GetCHMult((TH1F*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 102, (double) ((KStruct*) G__getstructoffset())->GetCHMult((TH1F*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_418_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KStruct*) G__getstructoffset())->GetElFieldAlongTheDrift());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_418_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KStruct::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_418_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KStruct::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_418_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KStruct::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_418_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KStruct::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_418_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KStruct*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_418_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KStruct*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_418_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KStruct*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_418_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KStruct*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_418_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KStruct::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_418_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KStruct::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_418_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KStruct::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_418_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KStruct::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__KDetSimDict_418_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KStruct* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KStruct(*(KStruct*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KStruct));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KStruct G__TKStruct;
static int G__KDetSimDict_418_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KStruct*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KStruct*) (soff+(sizeof(KStruct)*i)))->~G__TKStruct();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KStruct*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KStruct*) (soff))->~G__TKStruct();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__KDetSimDict_418_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KStruct* dest = (KStruct*) G__getstructoffset();
   *dest = *(KStruct*) libp->para[0].ref;
   const KStruct& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KGeometry */
static int G__KDetSimDict_429_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KGeometry* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KGeometry[n];
     } else {
       p = new((void*) gvp) KGeometry[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KGeometry;
     } else {
       p = new((void*) gvp) KGeometry;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KGeometry));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KGeometry* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KGeometry((TH3I*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) KGeometry((TH3I*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KGeometry));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KGeometry* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KGeometry((TH3I*) G__int(libp->para[0]), (TH3I*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) KGeometry((TH3I*) G__int(libp->para[0]), (TH3I*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KGeometry));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((KGeometry*) G__getstructoffset())->GetGrid((TH3I*) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KGeometry*) G__getstructoffset())->GetGrid((TH3I*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((KGeometry*) G__getstructoffset())->SetBoundaryConditions());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((KGeometry*) G__getstructoffset())->SetElecVolt((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KGeometry*) G__getstructoffset())->GetStepSize((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KGeometry*) G__getstructoffset())->GetStepSize((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((KGeometry*) G__getstructoffset())->MapToGeometry((Double_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((KGeometry*) G__getstructoffset())->MapToGeometry((Double_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KGeometry*) G__getstructoffset())->GetGeom());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((KGeometry*) G__getstructoffset())->Reset((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KGeometry*) G__getstructoffset())->Reset((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KGeometry*) G__getstructoffset())->Reset();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KGeometry*) G__getstructoffset())->ElRectangle((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KGeometry*) G__getstructoffset())->ElLine((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KGeometry*) G__getstructoffset())->ElCylinder((Float_t*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((KGeometry*) G__getstructoffset())->GetLowEdge((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((KGeometry*) G__getstructoffset())->GetUpEdge((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KGeometry::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KGeometry::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KGeometry::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KGeometry::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KGeometry*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KGeometry*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KGeometry*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KGeometry*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KGeometry::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KGeometry::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KGeometry::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_429_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KGeometry::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__KDetSimDict_429_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KGeometry* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KGeometry(*(KGeometry*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KGeometry));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KGeometry G__TKGeometry;
static int G__KDetSimDict_429_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KGeometry*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KGeometry*) (soff+(sizeof(KGeometry)*i)))->~G__TKGeometry();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KGeometry*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KGeometry*) (soff))->~G__TKGeometry();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__KDetSimDict_429_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KGeometry* dest = (KGeometry*) G__getstructoffset();
   *dest = *(KGeometry*) libp->para[0].ref;
   const KGeometry& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KDetector */
static int G__KDetSimDict_430_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KDetector* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KDetector[n];
     } else {
       p = new((void*) gvp) KDetector[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KDetector;
     } else {
       p = new((void*) gvp) KDetector;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KDetector*) G__getstructoffset())->ResetRnd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((KDetector*) G__getstructoffset())->SetDriftHisto((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KDetector*) G__getstructoffset())->SetDriftHisto((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KDetector*) G__getstructoffset())->SetCalculationParameters((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KDetector*) G__getstructoffset())->Declaration((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KDetector*) G__getstructoffset())->kappa((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KDetector*) G__getstructoffset())->V((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KDetector*) G__getstructoffset())->CalField((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KDetector*) G__getstructoffset())->CalPhyField();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KDetector*) G__getstructoffset())->CalRamoField();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((KDetector*) G__getstructoffset())->SetVoltage((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KDetector*) G__getstructoffset())->SetVoltage((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((KDetector*) G__getstructoffset())->SetNeff((TF3*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KDetector*) G__getstructoffset())->SetNeff((TF3*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((KDetector*) G__getstructoffset())->SetNeff((TH3F*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KDetector*) G__getstructoffset())->SetNeff((TH3F*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KDetector*) G__getstructoffset())->SetEntryPoint((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KDetector*) G__getstructoffset())->SetExitPoint((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((KDetector*) G__getstructoffset())->MipIR((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KDetector*) G__getstructoffset())->MipIR((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KDetector*) G__getstructoffset())->MipIR();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((KDetector*) G__getstructoffset())->ShowMipIR((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((KDetector*) G__getstructoffset())->ShowMipIR((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KDetector*) G__getstructoffset())->ShowMipIR((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KDetector*) G__getstructoffset())->GaussBeam((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KDetector*) G__getstructoffset())->ShowGaussBeam((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((KDetector*) G__getstructoffset())->Drift((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (KStruct*) G__int(libp->para[4]), (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((KDetector*) G__getstructoffset())->Drift((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (KStruct*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((KDetector*) G__getstructoffset())->CalM((KStruct*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((KDetector*) G__getstructoffset())->CalM((KStruct*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((KDetector*) G__getstructoffset())->Draw((Char_t*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((KDetector*) G__getstructoffset())->Draw((Char_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KDetector*) G__getstructoffset())->Draw1D((Char_t*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KDetector*) G__getstructoffset())->Save((Char_t*) G__int(libp->para[0]), (Char_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KDetector*) G__getstructoffset())->Read((Char_t*) G__int(libp->para[0]), (Char_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KDetector*) G__getstructoffset())->SetDebug((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KDetector*) G__getstructoffset())->SetPrecision((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KDetector*) G__getstructoffset())->GetPrecision());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KDetector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KDetector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KDetector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KDetector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KDetector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KDetector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KDetector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KDetector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_430_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KDetector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__KDetSimDict_430_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KDetector* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KDetector(*(KDetector*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KDetector G__TKDetector;
static int G__KDetSimDict_430_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KDetector*) (soff+(sizeof(KDetector)*i)))->~G__TKDetector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KDetector*) (soff))->~G__TKDetector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__KDetSimDict_430_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KDetector* dest = (KDetector*) G__getstructoffset();
   *dest = *(KDetector*) libp->para[0].ref;
   const KDetector& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KPad */
static int G__KDetSimDict_431_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KPad* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KPad((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) KPad((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KPad((Float_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) KPad((Float_t) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new KPad[n];
       } else {
         p = new((void*) gvp) KPad[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new KPad;
       } else {
         p = new((void*) gvp) KPad;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KPad));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_431_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KPad*) G__getstructoffset())->SetUpVolume((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_431_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KPad*) G__getstructoffset())->SetUpElectrodes();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_431_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KPad*) G__getstructoffset())->DrawPad((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_431_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KPad*) G__getstructoffset())->CalField((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_431_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KPad*) G__getstructoffset())->GetRamoField((TH1F*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_431_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KPad*) G__getstructoffset())->GetField((TH1F*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_431_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KPad*) G__getstructoffset())->GetField((TF1*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_431_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KPad*) G__getstructoffset())->GetField();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_431_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KPad*) G__getstructoffset())->GetRamoField();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_431_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KPad::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_431_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KPad::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_431_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KPad::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_431_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KPad::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_431_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KPad*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_431_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KPad::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_431_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KPad::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_431_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KPad::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_431_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KPad::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__KDetSimDict_431_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KPad* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KPad(*(KPad*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KPad));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KPad G__TKPad;
static int G__KDetSimDict_431_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KPad*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KPad*) (soff+(sizeof(KPad)*i)))->~G__TKPad();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KPad*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KPad*) (soff))->~G__TKPad();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__KDetSimDict_431_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KPad* dest = (KPad*) G__getstructoffset();
   *dest = *(KPad*) libp->para[0].ref;
   const KPad& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* K3D */
static int G__KDetSimDict_432_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   K3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new K3D(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) K3D(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new K3D(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) K3D(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new K3D((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) K3D((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new K3D((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) K3D((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_K3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_432_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((K3D*) G__getstructoffset())->SetUpColumn(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Short_t) G__int(libp->para[5])
, (Short_t) G__int(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_432_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((K3D*) G__getstructoffset())->SetUpVolume((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_432_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((K3D*) G__getstructoffset())->SetUpElectrodes((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((K3D*) G__getstructoffset())->SetUpElectrodes();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_432_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((K3D*) G__getstructoffset())->SetUpMaterial((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_432_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) K3D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_432_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) K3D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_432_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) K3D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_432_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      K3D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_432_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((K3D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_432_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) K3D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_432_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) K3D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_432_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) K3D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_432_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) K3D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__KDetSimDict_432_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   K3D* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new K3D(*(K3D*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_K3D));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef K3D G__TK3D;
static int G__KDetSimDict_432_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (K3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((K3D*) (soff+(sizeof(K3D)*i)))->~G__TK3D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (K3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((K3D*) (soff))->~G__TK3D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__KDetSimDict_432_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   K3D* dest = (K3D*) G__getstructoffset();
   *dest = *(K3D*) libp->para[0].ref;
   const K3D& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KPixel */
static int G__KDetSimDict_433_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KPixel* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KPixel(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) KPixel(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KPixel(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) KPixel(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KPixel((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) KPixel((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KPixel((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) KPixel((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KPixel));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_433_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KPixel*) G__getstructoffset())->SetUpVolume((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_433_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KPixel*) G__getstructoffset())->SetUpPixel(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Short_t) G__int(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_433_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KPixel*) G__getstructoffset())->SetUpElectrodes((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KPixel*) G__getstructoffset())->SetUpElectrodes();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_433_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KPixel::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_433_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KPixel::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_433_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KPixel::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_433_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KPixel::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_433_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KPixel*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_433_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KPixel::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_433_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KPixel::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_433_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KPixel::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_433_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KPixel::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__KDetSimDict_433_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KPixel* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KPixel(*(KPixel*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KPixel));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KPixel G__TKPixel;
static int G__KDetSimDict_433_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KPixel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KPixel*) (soff+(sizeof(KPixel)*i)))->~G__TKPixel();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KPixel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KPixel*) (soff))->~G__TKPixel();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__KDetSimDict_433_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KPixel* dest = (KPixel*) G__getstructoffset();
   *dest = *(KPixel*) libp->para[0].ref;
   const KPixel& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KStrip */
static int G__KDetSimDict_434_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KStrip*) G__getstructoffset())->SetUpElectrodes((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KStrip*) G__getstructoffset())->SetUpElectrodes();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_434_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KStrip*) G__getstructoffset())->SetUpVolume((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_434_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KStrip*) G__getstructoffset())->SetUpMaterial((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KStrip*) G__getstructoffset())->SetUpMaterial();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_434_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KStrip*) G__getstructoffset())->SetUpVolume((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_434_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KStrip*) G__getstructoffset())->SetUpVolume((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_434_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KStrip*) G__getstructoffset())->SetUpVolume((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_434_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KStrip* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KStrip(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) KStrip(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KStrip(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) KStrip(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KStrip(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) KStrip(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KStrip((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) KStrip((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KStrip((Float_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) KStrip((Float_t) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new KStrip[n];
       } else {
         p = new((void*) gvp) KStrip[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new KStrip;
       } else {
         p = new((void*) gvp) KStrip;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KStrip));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_434_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KStrip::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_434_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KStrip::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_434_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KStrip::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_434_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KStrip::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_434_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KStrip*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_434_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KStrip::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_434_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KStrip::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_434_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KStrip::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_434_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KStrip::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__KDetSimDict_434_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KStrip* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KStrip(*(KStrip*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KStrip));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KStrip G__TKStrip;
static int G__KDetSimDict_434_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KStrip*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KStrip*) (soff+(sizeof(KStrip)*i)))->~G__TKStrip();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KStrip*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KStrip*) (soff))->~G__TKStrip();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__KDetSimDict_434_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KStrip* dest = (KStrip*) G__getstructoffset();
   *dest = *(KStrip*) libp->para[0].ref;
   const KStrip& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KMesh */
static int G__KDetSimDict_435_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KMesh* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KMesh((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) KMesh((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KMesh((Float_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) KMesh((Float_t) G__double(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KMesh));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_435_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((KMesh*) G__getstructoffset())->GetBins((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_435_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((KMesh*) G__getstructoffset())->GetBins((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_435_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KMesh::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_435_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KMesh::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_435_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KMesh::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_435_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KMesh::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_435_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KMesh*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_435_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KMesh*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_435_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KMesh*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_435_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KMesh*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_435_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KMesh::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_435_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KMesh::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_435_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KMesh::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_435_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KMesh::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__KDetSimDict_435_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KMesh* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KMesh(*(KMesh*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KMesh));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KMesh G__TKMesh;
static int G__KDetSimDict_435_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KMesh*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KMesh*) (soff+(sizeof(KMesh)*i)))->~G__TKMesh();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KMesh*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KMesh*) (soff))->~G__TKMesh();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__KDetSimDict_435_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KMesh* dest = (KMesh*) G__getstructoffset();
   *dest = *(KMesh*) libp->para[0].ref;
   const KMesh& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KImplant3D */
static int G__KDetSimDict_436_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KImplant3D* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KImplant3D(
(Double_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) KImplant3D(
(Double_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KImplant3D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_436_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) KImplant3D::ImplEdge((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_436_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) KImplant3D::Distance((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) KImplant3D::Distance((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_436_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((KImplant3D*) G__getstructoffset())->Conc((Double_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((KImplant3D*) G__getstructoffset())->Conc((Double_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_436_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KImplant3D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_436_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KImplant3D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_436_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KImplant3D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_436_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KImplant3D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_436_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KImplant3D*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_436_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KImplant3D*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_436_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KImplant3D*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_436_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KImplant3D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_436_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KImplant3D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_436_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KImplant3D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_436_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KImplant3D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_436_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KImplant3D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__KDetSimDict_436_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KImplant3D* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KImplant3D(*(KImplant3D*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KImplant3D));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KImplant3D G__TKImplant3D;
static int G__KDetSimDict_436_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KImplant3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KImplant3D*) (soff+(sizeof(KImplant3D)*i)))->~G__TKImplant3D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KImplant3D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KImplant3D*) (soff))->~G__TKImplant3D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__KDetSimDict_436_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KImplant3D* dest = (KImplant3D*) G__getstructoffset();
   *dest = *(KImplant3D*) libp->para[0].ref;
   const KImplant3D& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KImplant2D */
static int G__KDetSimDict_437_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) KImplant2D::ImplEdge((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_437_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) KImplant2D::ImplEdge((Double_t) G__double(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_437_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) KImplant2D::Distance((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) KImplant2D::Distance((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_437_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((KImplant2D*) G__getstructoffset())->Distance1((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((KImplant2D*) G__getstructoffset())->Distance1((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_437_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) KImplant2D::Derivative((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_437_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) KImplant2D::Derivative((Double_t) G__double(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_437_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KImplant2D*) G__getstructoffset())->PDistance((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_437_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((KImplant2D*) G__getstructoffset())->Conc((Double_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((KImplant2D*) G__getstructoffset())->Conc((Double_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_437_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KImplant2D* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KImplant2D(
(Double_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) KImplant2D(
(Double_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KImplant2D));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_437_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KImplant2D::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_437_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KImplant2D::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_437_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KImplant2D::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_437_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KImplant2D::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_437_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KImplant2D*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_437_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KImplant2D*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_437_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KImplant2D*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_437_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KImplant2D*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_437_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KImplant2D::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_437_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KImplant2D::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_437_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KImplant2D::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict_437_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KImplant2D::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__KDetSimDict_437_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KImplant2D* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KImplant2D(*(KImplant2D*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__KDetSimDictLN_KImplant2D));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KImplant2D G__TKImplant2D;
static int G__KDetSimDict_437_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KImplant2D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KImplant2D*) (soff+(sizeof(KImplant2D)*i)))->~G__TKImplant2D();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KImplant2D*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KImplant2D*) (soff))->~G__TKImplant2D();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__KDetSimDict_437_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KImplant2D* dest = (KImplant2D*) G__getstructoffset();
   *dest = *(KImplant2D*) libp->para[0].ref;
   const KImplant2D& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */
static int G__KDetSimDict__0_684(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 102, (double) KInterpolate2D((TH3F*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 102, (double) KInterpolate2D((TH3F*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 102, (double) KInterpolate2D((TH3F*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict__0_702(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) KAlpha((Double_t) G__double(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) KAlpha((Double_t) G__double(libp->para[0]), (Short_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict__0_703(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) KM((TH1D*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Short_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) KM((TH1D*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict__0_704(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KHisProject((void*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__KDetSimDict__0_705(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) laser((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}


/*********************************************************
* Member function Stub
*********************************************************/

/* KField */

/* KMaterial */

/* KStruct */

/* KGeometry */

/* KDetector */

/* KPad */

/* K3D */

/* KPixel */

/* KStrip */

/* KMesh */

/* KImplant3D */

/* KImplant2D */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncKDetSimDict {
 public:
  G__Sizep2memfuncKDetSimDict(): p(&G__Sizep2memfuncKDetSimDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncKDetSimDict::*p)();
};

size_t G__get_sizep2memfuncKDetSimDict()
{
  G__Sizep2memfuncKDetSimDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceKDetSimDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__KDetSimDictLN_KDetector))) {
     KDetector *G__Lderived;
     G__Lderived=(KDetector*)0x1000;
     {
       KGeometry *G__Lpbase=(KGeometry*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KDetector),G__get_linked_tagnum(&G__KDetSimDictLN_KGeometry),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KMaterial *G__Lpbase=(KMaterial*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KDetector),G__get_linked_tagnum(&G__KDetSimDictLN_KMaterial),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__KDetSimDictLN_KPad))) {
     KPad *G__Lderived;
     G__Lderived=(KPad*)0x1000;
     {
       KDetector *G__Lpbase=(KDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KPad),G__get_linked_tagnum(&G__KDetSimDictLN_KDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KGeometry *G__Lpbase=(KGeometry*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KPad),G__get_linked_tagnum(&G__KDetSimDictLN_KGeometry),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       KMaterial *G__Lpbase=(KMaterial*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KPad),G__get_linked_tagnum(&G__KDetSimDictLN_KMaterial),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__KDetSimDictLN_K3D))) {
     K3D *G__Lderived;
     G__Lderived=(K3D*)0x1000;
     {
       KDetector *G__Lpbase=(KDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__KDetSimDictLN_K3D),G__get_linked_tagnum(&G__KDetSimDictLN_KDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KGeometry *G__Lpbase=(KGeometry*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__KDetSimDictLN_K3D),G__get_linked_tagnum(&G__KDetSimDictLN_KGeometry),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       KMaterial *G__Lpbase=(KMaterial*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__KDetSimDictLN_K3D),G__get_linked_tagnum(&G__KDetSimDictLN_KMaterial),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__KDetSimDictLN_KPixel))) {
     KPixel *G__Lderived;
     G__Lderived=(KPixel*)0x1000;
     {
       KDetector *G__Lpbase=(KDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KPixel),G__get_linked_tagnum(&G__KDetSimDictLN_KDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KGeometry *G__Lpbase=(KGeometry*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KPixel),G__get_linked_tagnum(&G__KDetSimDictLN_KGeometry),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       KMaterial *G__Lpbase=(KMaterial*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KPixel),G__get_linked_tagnum(&G__KDetSimDictLN_KMaterial),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__KDetSimDictLN_KStrip))) {
     KStrip *G__Lderived;
     G__Lderived=(KStrip*)0x1000;
     {
       KDetector *G__Lpbase=(KDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KStrip),G__get_linked_tagnum(&G__KDetSimDictLN_KDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KGeometry *G__Lpbase=(KGeometry*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KStrip),G__get_linked_tagnum(&G__KDetSimDictLN_KGeometry),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       KMaterial *G__Lpbase=(KMaterial*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KStrip),G__get_linked_tagnum(&G__KDetSimDictLN_KMaterial),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableKDetSimDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__KDetSimDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("_Ranit<ROOT::TSchemaHelper,difference_type,const_pointer,const_reference>",117,G__get_linked_tagnum(&G__KDetSimDictLN__RanitlEROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,G__get_linked_tagnum(&G__KDetSimDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__KDetSimDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__KDetSimDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__KDetSimDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::iterator_category,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::value_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::difference_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::pointer,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>::reference>",117,G__get_linked_tagnum(&G__KDetSimDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__KDetSimDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long>",117,G__get_linked_tagnum(&G__KDetSimDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long,ROOT::TSchemaHelper*>",117,G__get_linked_tagnum(&G__KDetSimDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__KDetSimDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__KDetSimDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::iterator_category,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::value_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::difference_type,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::pointer,iterator_traits<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__KDetSimDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__KDetSimDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("_Ranit<TVirtualArray*,difference_type,const_pointer,const_reference>",117,G__get_linked_tagnum(&G__KDetSimDictLN__RanitlETVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,G__get_linked_tagnum(&G__KDetSimDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__KDetSimDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__KDetSimDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__KDetSimDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::iterator_category,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::value_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::difference_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::pointer,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>::reference>",117,G__get_linked_tagnum(&G__KDetSimDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*>",117,G__get_linked_tagnum(&G__KDetSimDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*,long>",117,G__get_linked_tagnum(&G__KDetSimDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<random_access_iterator_tag,TVirtualArray*,long,TVirtualArray**>",117,G__get_linked_tagnum(&G__KDetSimDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__KDetSimDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR),0,G__get_linked_tagnum(&G__KDetSimDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::iterator_category,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::value_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::difference_type,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::pointer,iterator_traits<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>::reference>",117,G__get_linked_tagnum(&G__KDetSimDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__KDetSimDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__KDetSimDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__KDetSimDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__KDetSimDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__KDetSimDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__KDetSimDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__KDetSimDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__KDetSimDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__KDetSimDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__KDetSimDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__KDetSimDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__KDetSimDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__KDetSimDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__KDetSimDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__KDetSimDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__KDetSimDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__KDetSimDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__KDetSimDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__KDetSimDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__KDetSimDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__KDetSimDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__KDetSimDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__KDetSimDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__KDetSimDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__KDetSimDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__KDetSimDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* KField */
static void G__setup_memvarKField(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KField));
   { KField *p; p=(KField*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"Method=",0,"Method to calculate the intermediate points");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"dim=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->U)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TH3F),-1,-1,1,"U=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Ex)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TH3F),-1,-1,1,"Ex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Ey)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TH3F),-1,-1,1,"Ey=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Ez)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TH3F),-1,-1,1,"Ez=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TH3F),-1,-1,1,"E=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KMaterial */
static void G__setup_memvarKMaterial(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KMaterial));
   { KMaterial *p; p=(KMaterial*)0x1000; if (p) { }
   G__memvar_setup((void*)(&KMaterial::Mat),105,0,0,-1,G__defined_typename("Int_t"),-2,1,"Mat=",0,"Material index ");
   G__memvar_setup((void*)(&KMaterial::Temperature),102,0,0,-1,G__defined_typename("Float_t"),-2,1,"Temperature=",0,"Temperature");
   G__memvar_setup((void*)(&KMaterial::Mobility),105,0,0,-1,G__defined_typename("Int_t"),-2,1,"Mobility=",0,"mobility model for each material");
   G__memvar_setup((void*)(&KMaterial::ImpactIonization),105,0,0,-1,G__defined_typename("Int_t"),-2,1,"ImpactIonization=",0,"impact ionization model");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KStruct */
static void G__setup_memvarKStruct(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KStruct));
   { KStruct *p; p=(KStruct*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->PCharge)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"PCharge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Steps)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Steps=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DStrip)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"DStrip=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Xlenght)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Xlenght=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Ylenght)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Ylenght=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Zlenght)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Zlenght=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TTime)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"TTime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TCharge)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"TCharge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Xtrack)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Xtrack[10001]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Ytrack)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Ytrack[10001]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Ztrack)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Ztrack[10001]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Charge)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Charge[10001]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Time)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Time[10001]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Efield)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Efield[10001]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MulCar)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"MulCar[10001]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KGeometry */
static void G__setup_memvarKGeometry(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KGeometry));
   { KGeometry *p; p=(KGeometry*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->EG)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TH3I),-1,-1,1,"EG=",0,"electrode geometry");
   G__memvar_setup((void*)((long)(&p->DM)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TH3I),-1,-1,1,"DM=",0,"detector material");
   G__memvar_setup((void*)((long)(&p->nx)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nx=",0,"x-divisions");
   G__memvar_setup((void*)((long)(&p->ny)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ny=",0,"y-divisions");
   G__memvar_setup((void*)((long)(&p->nz)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nz=",0,"z-divisions ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KDetector */
static void G__setup_memvarKDetector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KDetector));
   { KDetector *p; p=(KDetector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"Deps=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TRandom),-1,-1,4,"ran=",0,"random number generator");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"CalErr=",0,"Error of the solver");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"MaxIter=",0,"Maximum number of iterations in eq solver");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"Debug=",0,"Print information of drift calculation etc.");
   G__memvar_setup((void*)((long)(&p->Voltage)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Voltage=",0,"Voltage");
   G__memvar_setup((void*)((long)(&p->Voltage2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Voltage2=",0,"Voltage2 ");
   G__memvar_setup((void*)((long)(&p->Voltages)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TArrayF),-1,-1,1,"Voltages=",0,"Array of voltages");
   G__memvar_setup((void*)((long)(&p->NeffF)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TF3),-1,-1,1,"NeffF=",0,"effective dopping concentration function");
   G__memvar_setup((void*)((long)(&p->NeffH)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TH3F),-1,-1,1,"NeffH=",0,"effective dopping concentration histogram");
   G__memvar_setup((void*)((long)(&p->Ramo)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_KField),-1,-1,1,"Ramo=",0,"ramo field ");
   G__memvar_setup((void*)((long)(&p->Real)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_KField),-1,-1,1,"Real=",0,"electric field");
   G__memvar_setup((void*)((long)(&p->B)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"B[3]=",0,"magnetic field");
   G__memvar_setup((void*)((long)(&p->taue)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"taue=",0,"effective trapping time constants - used if Multiplication is ON");
   G__memvar_setup((void*)((long)(&p->tauh)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"tauh=",0,"effective trapping time constants - used if Multiplication is ON");
   G__memvar_setup((void*)((long)(&p->BreakDown)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"BreakDown=",0,"if break down occurs it goes to 1 otherwise is 0");
   G__memvar_setup((void*)((long)(&p->MTresh)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"MTresh=",0,"treshold for taking multiplication into account");
   G__memvar_setup((void*)((long)(&p->BDTresh)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"BDTresh=",0,"hole multiplication - break down treshold ");
   G__memvar_setup((void*)((long)(&p->enp)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"enp[3]=",0,"entry point for the charge drift");
   G__memvar_setup((void*)((long)(&p->exp)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"exp[3]=",0,"exit point for the cahrge drift");
   G__memvar_setup((void*)((long)(&p->diff)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"diff=",0,"Diffusion simulation (yes=1, no=0)");
   G__memvar_setup((void*)((long)(&p->average)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"average=",0,"Average (over how many events)");
   G__memvar_setup((void*)((long)(&p->SStep)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"SStep=",0,"Simulation step size;");
   G__memvar_setup((void*)((long)(&p->pos)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TH1F),-1,-1,1,"pos=",0,"contribution of the holes to the total drift current");
   G__memvar_setup((void*)((long)(&p->neg)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TH1F),-1,-1,1,"neg=",0,"contribution of the electrons  to the total drift current");
   G__memvar_setup((void*)((long)(&p->sum)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TH1F),-1,-1,1,"sum=",0,"total drift current");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KPad */
static void G__setup_memvarKPad(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KPad));
   { KPad *p; p=(KPad*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TArrayF),-1,-1,4,"PhyPot=",0,"electric potential");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TArrayF),-1,-1,4,"PhyField=",0,"electric field ");
   G__memvar_setup((void*)((long)(&p->Neff)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TF1),-1,-1,1,"Neff=",0,"effective dopping concentration ");
   G__memvar_setup((void*)((long)(&p->CellY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"CellY=",0,"thickness of the diode");
   G__memvar_setup((void*)((long)(&p->CellX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"CellX=",0,"width of the diode");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* K3D */
static void G__setup_memvarK3D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__KDetSimDictLN_K3D));
   { K3D *p; p=(K3D*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Col)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Col=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CellZ)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"CellZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CellX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"CellX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CellY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"CellY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PosD)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"PosD=",0,"[Col]");
   G__memvar_setup((void*)((long)(&p->PosX)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"PosX=",0,"[Col]");
   G__memvar_setup((void*)((long)(&p->PosY)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"PosY=",0,"[Col]");
   G__memvar_setup((void*)((long)(&p->PosR)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"PosR=",0,"[Col]");
   G__memvar_setup((void*)((long)(&p->PosW)-(long)(p)),83,0,0,-1,G__defined_typename("Short_t"),-1,1,"PosW=",0,"[Col]");
   G__memvar_setup((void*)((long)(&p->PosM)-(long)(p)),83,0,0,-1,G__defined_typename("Short_t"),-1,1,"PosM=",0,"[Col]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KPixel */
static void G__setup_memvarKPixel(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KPixel));
   { KPixel *p; p=(KPixel*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Pix)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Pix=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CellZ)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"CellZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CellX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"CellX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CellY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"CellY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PSx)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"PSx=",0,"[Pix]");
   G__memvar_setup((void*)((long)(&p->PSy)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"PSy=",0,"[Pix]");
   G__memvar_setup((void*)((long)(&p->PSWx)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"PSWx=",0,"[Pix]");
   G__memvar_setup((void*)((long)(&p->PSWy)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"PSWy=",0,"[Pix]");
   G__memvar_setup((void*)((long)(&p->PSd)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"PSd=",0,"[Pix]");
   G__memvar_setup((void*)((long)(&p->PSW)-(long)(p)),83,0,0,-1,G__defined_typename("Short_t"),-1,1,"PSW=",0,"[Pix]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KStrip */
static void G__setup_memvarKStrip(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KStrip));
   { KStrip *p; p=(KStrip*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Pitch)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Pitch=",0,"Strip pitch ");
   G__memvar_setup((void*)((long)(&p->Width)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Width=",0,"Strip width");
   G__memvar_setup((void*)((long)(&p->Depth)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Depth=",0,"Strip depth");
   G__memvar_setup((void*)((long)(&p->CellX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"CellX=",0,"Detector thickness");
   G__memvar_setup((void*)((long)(&p->CellY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"CellY=",0,"Detector thickness");
   G__memvar_setup((void*)((long)(&p->NoStrips)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"NoStrips=",0,"Number of strips");
   G__memvar_setup((void*)((long)(&p->RamoStrip)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"RamoStrip=",0,"Ramo strip");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KMesh */
static void G__setup_memvarKMesh(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KMesh));
   { KMesh *p; p=(KMesh*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->N)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"N=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Max)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Max=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Min)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Min=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KImplant3D */
static void G__setup_memvarKImplant3D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KImplant3D));
   { KImplant3D *p; p=(KImplant3D*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Dim)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Dim[6]=",0,"Dim[0]= width in X ");
   G__memvar_setup((void*)((long)(&p->fConc)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TF1),-1,-1,1,"fConc=",0,"Concentration function");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KImplant2D */
static void G__setup_memvarKImplant2D(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KImplant2D));
   { KImplant2D *p; p=(KImplant2D*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Dim)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Dim[3]=",0,"Dimmensions of the Implant ([0]=Size X, [1]=Size Y, [2]=Curv");
   G__memvar_setup((void*)((long)(&p->fConc)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TF1),-1,-1,1,"fConc=",0,"Concentration function");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarKDetSimDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncKField(void) {
   /* KField */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KField));
   G__memfunc_setup("KField",559,G__KDetSimDict_368_0_1, 105, G__get_linked_tagnum(&G__KDetSimDictLN_KField), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalFieldXYZ",1023,G__KDetSimDict_368_0_2, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z F - 'Float_t' 0 - E", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalFieldXYZ",1023,G__KDetSimDict_368_0_3, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TVector3), -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalPotXYZ",846,G__KDetSimDict_368_0_4, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFieldPoint",1294,G__KDetSimDict_368_0_5, 102, -1, G__defined_typename("Float_t"), 0, 2, 3, 1, 0, 
"F - 'Float_t' 0 - - F - 'Float_t' 0 - -", (char*)NULL, (void*) G__func2void( (Float_t (*)(Float_t*, Float_t*))(&KField::GetFieldPoint) ), 0);
   G__memfunc_setup("CalField",756,G__KDetSimDict_368_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDim",570,G__KDetSimDict_368_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Mobility",841,G__KDetSimDict_368_0_8, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 1, 0, 
"f - 'Float_t' 0 - E f - 'Float_t' 0 - T "
"f - 'Float_t' 0 - Charg d - 'Double_t' 0 - Neff "
"i - 'Int_t' 0 - which", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Mobility",841,G__KDetSimDict_368_0_9, 100, -1, G__defined_typename("Double_t"), 0, 7, 1, 1, 0, 
"f - 'Float_t' 0 - cx f - 'Float_t' 0 - cy "
"f - 'Float_t' 0 - cz f - 'Float_t' 0 - T "
"f - 'Float_t' 0 - Charg d - 'Double_t' 0 - Neff "
"i - 'Int_t' 0 - which", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DriftVelocity",1352,G__KDetSimDict_368_0_10, 102, -1, G__defined_typename("Float_t"), 0, 5, 1, 1, 0, 
"f - 'Float_t' 0 - E f - 'Float_t' 0 - Charg "
"f - 'Float_t' 0 - T d - 'Double_t' 0 - Neff "
"i - 'Int_t' 0 - which", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DriftVelocity",1352,G__KDetSimDict_368_0_11, 102, -1, G__defined_typename("Float_t"), 0, 7, 1, 1, 0, 
"f - 'Float_t' 0 - cx f - 'Float_t' 0 - cy "
"f - 'Float_t' 0 - cz f - 'Float_t' 0 - Charg "
"f - 'Float_t' 0 - T d - 'Double_t' 0 - Neff "
"i - 'Int_t' 0 - which", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,G__KDetSimDict_368_0_12, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TH2F), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 0 - opt i - 'Int_t' 0 '3' - "
"i - 'Int_t' 0 '1' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("alpha",518,G__KDetSimDict_368_0_13, 100, -1, G__defined_typename("Double_t"), 0, 1, 3, 1, 0, "d - 'Double_t' 0 - E", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t))(&KField::alpha) ), 0);
   G__memfunc_setup("beta",412,G__KDetSimDict_368_0_14, 100, -1, G__defined_typename("Double_t"), 0, 1, 3, 1, 0, "d - 'Double_t' 0 - E", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t))(&KField::beta) ), 0);
   G__memfunc_setup("M",77,G__KDetSimDict_368_0_15, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__KDetSimDict_368_0_16, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KField::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__KDetSimDict_368_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KField::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__KDetSimDict_368_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KField::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__KDetSimDict_368_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KField::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__KDetSimDict_368_0_20, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__KDetSimDict_368_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__KDetSimDict_368_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__KDetSimDict_368_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__KDetSimDict_368_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KField::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__KDetSimDict_368_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KField::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__KDetSimDict_368_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KField::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__KDetSimDict_368_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KField::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KField", 559, G__KDetSimDict_368_0_28, (int) ('i'), G__get_linked_tagnum(&G__KDetSimDictLN_KField), -1, 0, 1, 1, 1, 0, "u 'KField' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KField", 685, G__KDetSimDict_368_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__KDetSimDict_368_0_30, (int) ('u'), G__get_linked_tagnum(&G__KDetSimDictLN_KField), -1, 1, 1, 1, 1, 0, "u 'KField' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKMaterial(void) {
   /* KMaterial */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KMaterial));
   G__memfunc_setup("KMaterial",890,G__KDetSimDict_417_0_1, 105, G__get_linked_tagnum(&G__KDetSimDictLN_KMaterial), -1, 0, 0, 1, 1, 0, "", "MobMod=1;}", (void*) NULL, 0);
   G__memfunc_setup("dEdx",389,G__KDetSimDict_417_0_2, 100, -1, G__defined_typename("Double_t"), 0, 1, 3, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t))(&KMaterial::dEdx) ), 0);
   G__memfunc_setup("dEX",257,G__KDetSimDict_417_0_3, 102, -1, G__defined_typename("Float_t"), 0, 4, 3, 1, 0, 
"d - 'Double_t' 0 - - D - 'Double_t' 0 - - "
"D - 'Double_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) G__func2void( (Float_t (*)(Double_t, Double_t*, Double_t*, Double_t))(&KMaterial::dEX) ), 0);
   G__memfunc_setup("Perm",404,G__KDetSimDict_417_0_4, 102, -1, G__defined_typename("Float_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 '1' -", (char*)NULL, (void*) G__func2void( (Float_t (*)(Int_t))(&KMaterial::Perm) ), 0);
   G__memfunc_setup("Rho",297,G__KDetSimDict_417_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Float_t (*)())(&KMaterial::Rho) ), 0);
   G__memfunc_setup("MobMod",574,G__KDetSimDict_417_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&KMaterial::MobMod) ), 0);
   G__memfunc_setup("Class",502,G__KDetSimDict_417_0_7, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KMaterial::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__KDetSimDict_417_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KMaterial::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__KDetSimDict_417_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KMaterial::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__KDetSimDict_417_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KMaterial::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__KDetSimDict_417_0_11, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__KDetSimDict_417_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__KDetSimDict_417_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__KDetSimDict_417_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__KDetSimDict_417_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KMaterial::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__KDetSimDict_417_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KMaterial::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__KDetSimDict_417_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KMaterial::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__KDetSimDict_417_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KMaterial::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KMaterial", 890, G__KDetSimDict_417_0_19, (int) ('i'), G__get_linked_tagnum(&G__KDetSimDictLN_KMaterial), -1, 0, 1, 1, 1, 0, "u 'KMaterial' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KMaterial", 1016, G__KDetSimDict_417_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__KDetSimDict_417_0_21, (int) ('u'), G__get_linked_tagnum(&G__KDetSimDictLN_KMaterial), -1, 1, 1, 1, 1, 0, "u 'KMaterial' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKStruct(void) {
   /* KStruct */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KStruct));
   G__memfunc_setup("KStruct",720,G__KDetSimDict_418_0_1, 105, G__get_linked_tagnum(&G__KDetSimDictLN_KStruct), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__KDetSimDict_418_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Info",396,G__KDetSimDict_418_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,G__KDetSimDict_418_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCH",427,G__KDetSimDict_418_0_5, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'TH1F' - 0 - - i - 'Int_t' 0 '0' - "
"f - 'Float_t' 0 '1' - f - 'Float_t' 0 '-1' -", ",Int_t=200, Float_t=100e-9); Changed from 2.23 -> 3.0", (void*) NULL, 0);
   G__memfunc_setup("GetCHMult",845,G__KDetSimDict_418_0_6, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 0, 
"U 'TH1F' - 0 - - i - 'Int_t' 0 '0' - "
"f - 'Float_t' 0 '1' - f - 'Float_t' 0 '-1' -", ",Int_t=200, Float_t=100e-9); Changed from 2.23 -> 3.0", (void*) NULL, 0);
   G__memfunc_setup("GetElFieldAlongTheDrift",2240,G__KDetSimDict_418_0_7, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TH1D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__KDetSimDict_418_0_8, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KStruct::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__KDetSimDict_418_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KStruct::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__KDetSimDict_418_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KStruct::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__KDetSimDict_418_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KStruct::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__KDetSimDict_418_0_12, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__KDetSimDict_418_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__KDetSimDict_418_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__KDetSimDict_418_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__KDetSimDict_418_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KStruct::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__KDetSimDict_418_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KStruct::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__KDetSimDict_418_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KStruct::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__KDetSimDict_418_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KStruct::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KStruct", 720, G__KDetSimDict_418_0_20, (int) ('i'), G__get_linked_tagnum(&G__KDetSimDictLN_KStruct), -1, 0, 1, 1, 1, 0, "u 'KStruct' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KStruct", 846, G__KDetSimDict_418_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__KDetSimDict_418_0_22, (int) ('u'), G__get_linked_tagnum(&G__KDetSimDictLN_KStruct), -1, 1, 1, 1, 1, 0, "u 'KStruct' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKGeometry(void) {
   /* KGeometry */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KGeometry));
   G__memfunc_setup("KGeometry",919,G__KDetSimDict_429_0_1, 105, G__get_linked_tagnum(&G__KDetSimDictLN_KGeometry), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KGeometry",919,G__KDetSimDict_429_0_2, 105, G__get_linked_tagnum(&G__KDetSimDictLN_KGeometry), -1, 0, 1, 1, 1, 0, "U 'TH3I' - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KGeometry",919,G__KDetSimDict_429_0_3, 105, G__get_linked_tagnum(&G__KDetSimDictLN_KGeometry), -1, 0, 2, 1, 1, 0, 
"U 'TH3I' - 0 - x U 'TH3I' - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGrid",678,G__KDetSimDict_429_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TH3I' - 0 - - s - 'Short_t' 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBoundaryConditions",2186,G__KDetSimDict_429_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetElecVolt",1098,G__KDetSimDict_429_0_6, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStepSize",1111,G__KDetSimDict_429_0_7, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStepSize",1111,G__KDetSimDict_429_0_8, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MapToGeometry",1325,G__KDetSimDict_429_0_9, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TH3F), -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - - d - 'Double_t' 0 '1' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGeom",680,G__KDetSimDict_429_0_10, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TH3F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__KDetSimDict_429_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '0' - i - 'Int_t' 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ElRectangle",1094,G__KDetSimDict_429_0_12, 121, -1, -1, 0, 4, 1, 1, 0, 
"F - 'Float_t' 0 - Pos F - 'Float_t' 0 - Size "
"i - 'Int_t' 0 - Wei i - 'Int_t' 0 - Mat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ElLine",569,G__KDetSimDict_429_0_13, 121, -1, -1, 0, 5, 1, 1, 0, 
"F - 'Float_t' 0 - r0 F - 'Float_t' 0 - r1 "
"F - 'Float_t' 0 - W i - 'Int_t' 0 - Wei "
"i - 'Int_t' 0 - Mat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ElCylinder",1003,G__KDetSimDict_429_0_14, 121, -1, -1, 0, 6, 1, 1, 0, 
"F - 'Float_t' 0 - Pos f - 'Float_t' 0 - R "
"f - 'Float_t' 0 - L i - 'Int_t' 0 - O "
"i - 'Int_t' 0 - Wei i - 'Int_t' 0 - Mat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLowEdge",967,G__KDetSimDict_429_0_15, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUpEdge",858,G__KDetSimDict_429_0_16, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__KDetSimDict_429_0_17, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KGeometry::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__KDetSimDict_429_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KGeometry::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__KDetSimDict_429_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KGeometry::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__KDetSimDict_429_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KGeometry::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__KDetSimDict_429_0_21, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__KDetSimDict_429_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__KDetSimDict_429_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__KDetSimDict_429_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__KDetSimDict_429_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KGeometry::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__KDetSimDict_429_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KGeometry::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__KDetSimDict_429_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KGeometry::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__KDetSimDict_429_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KGeometry::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KGeometry", 919, G__KDetSimDict_429_0_29, (int) ('i'), G__get_linked_tagnum(&G__KDetSimDictLN_KGeometry), -1, 0, 1, 1, 1, 0, "u 'KGeometry' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KGeometry", 1045, G__KDetSimDict_429_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__KDetSimDict_429_0_31, (int) ('u'), G__get_linked_tagnum(&G__KDetSimDictLN_KGeometry), -1, 1, 1, 1, 1, 0, "u 'KGeometry' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKDetector(void) {
   /* KDetector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KDetector));
   G__memfunc_setup("KDetector",901,G__KDetSimDict_430_0_1, 105, G__get_linked_tagnum(&G__KDetSimDictLN_KDetector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetRnd",807,G__KDetSimDict_430_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - seed", "reset the random generator  ", (void*) NULL, 0);
   G__memfunc_setup("SetDriftHisto",1324,G__KDetSimDict_430_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - x i - 'Int_t' 0 '200' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCalculationParameters",2479,G__KDetSimDict_430_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - x i - 'Int_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Declaration",1126,G__KDetSimDict_430_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", "declaration of boundary conditions", (void*) NULL, 0);
   G__memfunc_setup("kappa",525,G__KDetSimDict_430_0_6, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"i - - 0 - - i - - 0 - - "
"i - - 0 - - i - - 0 - -", "defining space charge", (void*) NULL, 0);
   G__memfunc_setup("V",86,G__KDetSimDict_430_0_7, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"i - - 0 - - i - - 0 - -", "defining voltage", (void*) NULL, 0);
   G__memfunc_setup("CalField",756,G__KDetSimDict_430_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", "start declaration followed by solving Poisson's equation.", (void*) NULL, 0);
   G__memfunc_setup("CalPhyField",1061,G__KDetSimDict_430_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalRamoField",1155,G__KDetSimDict_430_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVoltage",1022,G__KDetSimDict_430_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - x i - 'Int_t' 0 '1' calnow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNeff",683,G__KDetSimDict_430_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TF3' - 0 - neff i - 'Int_t' 0 '1' calnow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNeff",683,G__KDetSimDict_430_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TH3F' - 0 - neff i - 'Int_t' 0 '1' calnow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEntryPoint",1352,G__KDetSimDict_430_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetExitPoint",1232,G__KDetSimDict_430_0_15, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MipIR",449,G__KDetSimDict_430_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '20' - f - 'Float_t' 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShowMipIR",866,G__KDetSimDict_430_0_17, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 '14' - "
"i - 'Int_t' 0 '1' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GaussBeam",888,G__KDetSimDict_430_0_18, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", "user manca", (void*) NULL, 0);
   G__memfunc_setup("ShowGaussBeam",1305,G__KDetSimDict_430_0_19, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", "user manca", (void*) NULL, 0);
   G__memfunc_setup("Drift",505,G__KDetSimDict_430_0_20, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - f - 'Float_t' 0 - - "
"U 'KStruct' - 0 - - d - 'Double_t' 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalM",349,G__KDetSimDict_430_0_21, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'KStruct' - 0 - seg D - 'Double_t' 0 - data "
"i - 'Int_t' 0 '-1' -", "multiplication calculation", (void*) NULL, 0);
   G__memfunc_setup("Draw",398,G__KDetSimDict_430_0_22, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TH2F), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 0 - - f - 'Float_t' 0 '1' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw1D",515,G__KDetSimDict_430_0_23, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TH1F), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 0 - - f - 'Float_t' 0 - - "
"i - 'Int_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Save",399,G__KDetSimDict_430_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 0 - - C - 'Char_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Read",380,G__KDetSimDict_430_0_25, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TFile), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 0 - - C - 'Char_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDebug",787,G__KDetSimDict_430_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPrecision",1240,G__KDetSimDict_430_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPrecision",1228,G__KDetSimDict_430_0_28, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__KDetSimDict_430_0_29, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KDetector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__KDetSimDict_430_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KDetector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__KDetSimDict_430_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KDetector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__KDetSimDict_430_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KDetector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__KDetSimDict_430_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__KDetSimDict_430_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KDetector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__KDetSimDict_430_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KDetector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__KDetSimDict_430_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KDetector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__KDetSimDict_430_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KDetector::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KDetector", 901, G__KDetSimDict_430_0_41, (int) ('i'), G__get_linked_tagnum(&G__KDetSimDictLN_KDetector), -1, 0, 1, 1, 1, 0, "u 'KDetector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KDetector", 1027, G__KDetSimDict_430_0_42, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__KDetSimDict_430_0_43, (int) ('u'), G__get_linked_tagnum(&G__KDetSimDictLN_KDetector), -1, 1, 1, 1, 1, 0, "u 'KDetector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKPad(void) {
   /* KPad */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KPad));
   G__memfunc_setup("rk4",273,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 6, 1, 4, 0, 
"F - - 0 - - F - - 0 - - "
"i - - 0 - - f - - 0 - - "
"f - - 0 - - F - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rtbis",548,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 4, 0, 
"f - - 0 - - f - - 0 - - "
"f - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PoEqSolve",894,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 4, 0, "f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derivs",621,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"f - - 0 - x F - - 0 - - "
"F - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KPad",352,G__KDetSimDict_431_0_5, 105, G__get_linked_tagnum(&G__KDetSimDictLN_KPad), -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 '50' - f - 'Float_t' 0 '301' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpVolume",1129,G__KDetSimDict_431_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpElectrodes",1531,G__KDetSimDict_431_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawPad",675,G__KDetSimDict_431_0_8, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TGraph), -1, 0, 1, 1, 1, 0, "C - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalField",756,G__KDetSimDict_431_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - what", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRamoField",1171,G__KDetSimDict_431_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TH1F' - 0 - rf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetField",772,G__KDetSimDict_431_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TH1F' - 0 - rf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetField",772,G__KDetSimDict_431_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TF1' - 0 - rf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetField",772,G__KDetSimDict_431_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRamoField",1171,G__KDetSimDict_431_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__KDetSimDict_431_0_15, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KPad::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__KDetSimDict_431_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KPad::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__KDetSimDict_431_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KPad::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__KDetSimDict_431_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KPad::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__KDetSimDict_431_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__KDetSimDict_431_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KPad::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__KDetSimDict_431_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KPad::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__KDetSimDict_431_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KPad::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__KDetSimDict_431_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KPad::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KPad", 352, G__KDetSimDict_431_0_27, (int) ('i'), G__get_linked_tagnum(&G__KDetSimDictLN_KPad), -1, 0, 1, 1, 1, 0, "u 'KPad' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KPad", 478, G__KDetSimDict_431_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__KDetSimDict_431_0_29, (int) ('u'), G__get_linked_tagnum(&G__KDetSimDictLN_KPad), -1, 1, 1, 1, 1, 0, "u 'KPad' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncK3D(void) {
   /* K3D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__KDetSimDictLN_K3D));
   G__memfunc_setup("K3D",194,G__KDetSimDict_432_0_1, 105, G__get_linked_tagnum(&G__KDetSimDictLN_K3D), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - f - 'Float_t' 0 '100' - "
"f - 'Float_t' 0 '100' - f - 'Float_t' 0 '105' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpColumn",1119,G__KDetSimDict_432_0_2, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - s - 'Short_t' 0 - - "
"s - 'Short_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpVolume",1129,G__KDetSimDict_432_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpElectrodes",1531,G__KDetSimDict_432_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpMaterial",1312,G__KDetSimDict_432_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__KDetSimDict_432_0_6, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&K3D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__KDetSimDict_432_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&K3D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__KDetSimDict_432_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&K3D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__KDetSimDict_432_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&K3D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__KDetSimDict_432_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__KDetSimDict_432_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&K3D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__KDetSimDict_432_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&K3D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__KDetSimDict_432_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&K3D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__KDetSimDict_432_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&K3D::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("K3D", 194, G__KDetSimDict_432_0_18, (int) ('i'), G__get_linked_tagnum(&G__KDetSimDictLN_K3D), -1, 0, 1, 1, 1, 0, "u 'K3D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~K3D", 320, G__KDetSimDict_432_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__KDetSimDict_432_0_20, (int) ('u'), G__get_linked_tagnum(&G__KDetSimDictLN_K3D), -1, 1, 1, 1, 1, 0, "u 'K3D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKPixel(void) {
   /* KPixel */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KPixel));
   G__memfunc_setup("KPixel",589,G__KDetSimDict_433_0_1, 105, G__get_linked_tagnum(&G__KDetSimDictLN_KPixel), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - f - 'Float_t' 0 '200' - "
"f - 'Float_t' 0 '50' - f - 'Float_t' 0 '125' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpVolume",1129,G__KDetSimDict_433_0_2, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpPixel",1011,G__KDetSimDict_433_0_3, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"s - 'Short_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpElectrodes",1531,G__KDetSimDict_433_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__KDetSimDict_433_0_5, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KPixel::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__KDetSimDict_433_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KPixel::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__KDetSimDict_433_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KPixel::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__KDetSimDict_433_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KPixel::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__KDetSimDict_433_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__KDetSimDict_433_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KPixel::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__KDetSimDict_433_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KPixel::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__KDetSimDict_433_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KPixel::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__KDetSimDict_433_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KPixel::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KPixel", 589, G__KDetSimDict_433_0_17, (int) ('i'), G__get_linked_tagnum(&G__KDetSimDictLN_KPixel), -1, 0, 1, 1, 1, 0, "u 'KPixel' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KPixel", 715, G__KDetSimDict_433_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__KDetSimDict_433_0_19, (int) ('u'), G__get_linked_tagnum(&G__KDetSimDictLN_KPixel), -1, 1, 1, 1, 1, 0, "u 'KPixel' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKStrip(void) {
   /* KStrip */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KStrip));
   G__memfunc_setup("SetUpElectrodes",1531,G__KDetSimDict_434_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpVolume",1129,G__KDetSimDict_434_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpMaterial",1312,G__KDetSimDict_434_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpVolume",1129,G__KDetSimDict_434_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpVolume",1129,G__KDetSimDict_434_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpVolume",1129,G__KDetSimDict_434_0_6, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - F - 'Float_t' 0 - - "
"i - 'Int_t' 0 - - F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KStrip",605,G__KDetSimDict_434_0_7, 105, G__get_linked_tagnum(&G__KDetSimDictLN_KStrip), -1, 0, 5, 1, 1, 0, 
"f - 'Float_t' 0 '80' - f - 'Float_t' 0 '20' - "
"f - 'Float_t' 0 '2' - i - 'Int_t' 0 '3' - "
"f - 'Float_t' 0 '300' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__KDetSimDict_434_0_8, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KStrip::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__KDetSimDict_434_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KStrip::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__KDetSimDict_434_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KStrip::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__KDetSimDict_434_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KStrip::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__KDetSimDict_434_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__KDetSimDict_434_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KStrip::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__KDetSimDict_434_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KStrip::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__KDetSimDict_434_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KStrip::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__KDetSimDict_434_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KStrip::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KStrip", 605, G__KDetSimDict_434_0_20, (int) ('i'), G__get_linked_tagnum(&G__KDetSimDictLN_KStrip), -1, 0, 1, 1, 1, 0, "u 'KStrip' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KStrip", 731, G__KDetSimDict_434_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__KDetSimDict_434_0_22, (int) ('u'), G__get_linked_tagnum(&G__KDetSimDictLN_KStrip), -1, 1, 1, 1, 1, 0, "u 'KStrip' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKMesh(void) {
   /* KMesh */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KMesh));
   G__memfunc_setup("KMesh",472,G__KDetSimDict_435_0_1, 105, G__get_linked_tagnum(&G__KDetSimDictLN_KMesh), -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - x0 f - 'Float_t' 0 '0' x1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBins",684,G__KDetSimDict_435_0_2, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - Num f - 'Float_t' 0 - SS "
"f - 'Float_t' 0 - ES F - 'Float_t' 0 - X", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBins",684,G__KDetSimDict_435_0_3, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - size F - 'Float_t' 0 - Pos "
"F - 'Float_t' 0 - Step F - 'Float_t' 0 - Bins", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__KDetSimDict_435_0_4, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KMesh::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__KDetSimDict_435_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KMesh::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__KDetSimDict_435_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KMesh::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__KDetSimDict_435_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KMesh::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__KDetSimDict_435_0_8, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__KDetSimDict_435_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__KDetSimDict_435_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__KDetSimDict_435_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__KDetSimDict_435_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KMesh::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__KDetSimDict_435_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KMesh::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__KDetSimDict_435_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KMesh::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__KDetSimDict_435_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KMesh::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KMesh", 472, G__KDetSimDict_435_0_16, (int) ('i'), G__get_linked_tagnum(&G__KDetSimDictLN_KMesh), -1, 0, 1, 1, 1, 0, "u 'KMesh' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KMesh", 598, G__KDetSimDict_435_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__KDetSimDict_435_0_18, (int) ('u'), G__get_linked_tagnum(&G__KDetSimDictLN_KMesh), -1, 1, 1, 1, 1, 0, "u 'KMesh' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKImplant3D(void) {
   /* KImplant3D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KImplant3D));
   G__memfunc_setup("KImplant3D",919,G__KDetSimDict_436_0_1, 105, G__get_linked_tagnum(&G__KDetSimDictLN_KImplant3D), -1, 0, 3, 1, 1, 0, 
"D - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ImplEdge",775,G__KDetSimDict_436_0_2, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"D - 'Double_t' 0 - - D - 'Double_t' 0 - -", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t*, Double_t*))(&KImplant3D::ImplEdge) ), 0);
   G__memfunc_setup("Distance",811,G__KDetSimDict_436_0_3, 100, -1, G__defined_typename("Double_t"), 0, 3, 3, 1, 0, 
"D - 'Double_t' 0 - - D - 'Double_t' 0 - - "
"D - 'Double_t' 0 'NULL' -", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t*, Double_t*, Double_t*))(&KImplant3D::Distance) ), 0);
   G__memfunc_setup("Conc",387,G__KDetSimDict_436_0_4, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - - d - 'Double_t' 0 '-1e12' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__KDetSimDict_436_0_5, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KImplant3D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__KDetSimDict_436_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KImplant3D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__KDetSimDict_436_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KImplant3D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__KDetSimDict_436_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KImplant3D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__KDetSimDict_436_0_9, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__KDetSimDict_436_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__KDetSimDict_436_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__KDetSimDict_436_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__KDetSimDict_436_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KImplant3D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__KDetSimDict_436_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KImplant3D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__KDetSimDict_436_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KImplant3D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__KDetSimDict_436_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KImplant3D::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KImplant3D", 919, G__KDetSimDict_436_0_17, (int) ('i'), G__get_linked_tagnum(&G__KDetSimDictLN_KImplant3D), -1, 0, 1, 1, 1, 0, "u 'KImplant3D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KImplant3D", 1045, G__KDetSimDict_436_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__KDetSimDict_436_0_19, (int) ('u'), G__get_linked_tagnum(&G__KDetSimDictLN_KImplant3D), -1, 1, 1, 1, 1, 0, "u 'KImplant3D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKImplant2D(void) {
   /* KImplant2D */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__KDetSimDictLN_KImplant2D));
   G__memfunc_setup("ImplEdge",775,G__KDetSimDict_437_0_1, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"D - 'Double_t' 0 - - D - 'Double_t' 0 - -", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t*, Double_t*))(&KImplant2D::ImplEdge) ), 0);
   G__memfunc_setup("ImplEdge",775,G__KDetSimDict_437_0_2, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"d - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t, Double_t*))(&KImplant2D::ImplEdge) ), 0);
   G__memfunc_setup("Distance",811,G__KDetSimDict_437_0_3, 100, -1, G__defined_typename("Double_t"), 0, 3, 3, 1, 0, 
"D - 'Double_t' 0 - - D - 'Double_t' 0 - - "
"D - 'Double_t' 0 'NULL' -", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t*, Double_t*, Double_t*))(&KImplant2D::Distance) ), 0);
   G__memfunc_setup("Distance1",860,G__KDetSimDict_437_0_4, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"D - 'Double_t' 0 - - D - 'Double_t' 0 - - "
"D - 'Double_t' 0 'NULL' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Derivative",1043,G__KDetSimDict_437_0_5, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"D - 'Double_t' 0 - - D - 'Double_t' 0 - -", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t*, Double_t*))(&KImplant2D::Derivative) ), 0);
   G__memfunc_setup("Derivative",1043,G__KDetSimDict_437_0_6, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"d - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t, Double_t*))(&KImplant2D::Derivative) ), 0);
   G__memfunc_setup("PDistance",891,G__KDetSimDict_437_0_7, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Conc",387,G__KDetSimDict_437_0_8, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - - d - 'Double_t' 0 '-1e12' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KImplant2D",918,G__KDetSimDict_437_0_9, 105, G__get_linked_tagnum(&G__KDetSimDictLN_KImplant2D), -1, 0, 3, 1, 1, 0, 
"D - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__KDetSimDict_437_0_10, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KImplant2D::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__KDetSimDict_437_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KImplant2D::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__KDetSimDict_437_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KImplant2D::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__KDetSimDict_437_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KImplant2D::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__KDetSimDict_437_0_14, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__KDetSimDict_437_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__KDetSimDict_437_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__KDetSimDict_437_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__KDetSimDict_437_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KImplant2D::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__KDetSimDict_437_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KImplant2D::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__KDetSimDict_437_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KImplant2D::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__KDetSimDict_437_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KImplant2D::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KImplant2D", 918, G__KDetSimDict_437_0_22, (int) ('i'), G__get_linked_tagnum(&G__KDetSimDictLN_KImplant2D), -1, 0, 1, 1, 1, 0, "u 'KImplant2D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KImplant2D", 1044, G__KDetSimDict_437_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__KDetSimDict_437_0_24, (int) ('u'), G__get_linked_tagnum(&G__KDetSimDictLN_KImplant2D), -1, 1, 1, 1, 1, 0, "u 'KImplant2D' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncKDetSimDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
   G__memvar_setup((void*)(&gROOT),85,0,0,G__get_linked_tagnum(&G__KDetSimDictLN_TROOT),-1,-1,1,"gROOT=",0,(char*)NULL);
}

static void G__cpp_setup_global4() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalKDetSimDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
   G__memfunc_setup("KInterpolate2D", 1352, G__KDetSimDict__0_684, 102, -1, G__defined_typename("Float_t"), 0, 5, 1, 1, 0, 
"U 'TH3F' - 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - i - 'Int_t' 0 '3' - "
"i - 'Int_t' 0 '1' -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("KAlpha", 561, G__KDetSimDict__0_702, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - - s - 'Short_t' 0 - - "
"i - 'Int_t' 0 '0' -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("KM", 152, G__KDetSimDict__0_703, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"U 'TH1D' - 0 - - f - 'Float_t' 0 - - "
"s - 'Short_t' 0 '1' -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("KHisProject", 1094, G__KDetSimDict__0_704, 85, G__get_linked_tagnum(&G__KDetSimDictLN_TH2F), -1, 0, 3, 1, 1, 0, 
"Y - - 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("laser", 535, G__KDetSimDict__0_705, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - - D - 'Double_t' 0 - -", (char*) NULL
, (void*) NULL, 0);

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcKDetSimDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__KDetSimDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN__RanitlEROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR = { "_Ranit<ROOT::TSchemaHelper,long,ROOT::TSchemaHelper*,ROOT::TSchemaHelper&>" , 115 , -1 };
G__linked_taginfo G__KDetSimDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR = { "iterator<random_access_iterator_tag,ROOT::TSchemaHelper,long,ROOT::TSchemaHelper*,ROOT::TSchemaHelper&>" , 115 , -1 };
G__linked_taginfo G__KDetSimDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN__RanitlETVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR = { "_Ranit<TVirtualArray*,long,TVirtualArray**,TVirtualArray*&>" , 115 , -1 };
G__linked_taginfo G__KDetSimDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR = { "iterator<random_access_iterator_tag,TVirtualArray*,long,TVirtualArray**,TVirtualArray*&>" , 115 , -1 };
G__linked_taginfo G__KDetSimDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::const_iterator>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TRandom = { "TRandom" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TH3I = { "TH3I" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TH3F = { "TH3F" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_KField = { "KField" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__KDetSimDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TROOT = { "TROOT" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_KMaterial = { "KMaterial" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_KStruct = { "KStruct" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_TF3 = { "TF3" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_KGeometry = { "KGeometry" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_KDetector = { "KDetector" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_KPad = { "KPad" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_K3D = { "K3D" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_KPixel = { "KPixel" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_KStrip = { "KStrip" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_KMesh = { "KMesh" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_KImplant3D = { "KImplant3D" , 99 , -1 };
G__linked_taginfo G__KDetSimDictLN_KImplant2D = { "KImplant2D" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableKDetSimDict() {
  G__KDetSimDictLN_TClass.tagnum = -1 ;
  G__KDetSimDictLN_TBuffer.tagnum = -1 ;
  G__KDetSimDictLN_TMemberInspector.tagnum = -1 ;
  G__KDetSimDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__KDetSimDictLN__RanitlEROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR.tagnum = -1 ;
  G__KDetSimDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR.tagnum = -1 ;
  G__KDetSimDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__KDetSimDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__KDetSimDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__KDetSimDictLN__RanitlETVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR.tagnum = -1 ;
  G__KDetSimDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR.tagnum = -1 ;
  G__KDetSimDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__KDetSimDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR.tagnum = -1 ;
  G__KDetSimDictLN_TArrayF.tagnum = -1 ;
  G__KDetSimDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__KDetSimDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__KDetSimDictLN_TF1.tagnum = -1 ;
  G__KDetSimDictLN_TH1D.tagnum = -1 ;
  G__KDetSimDictLN_TH1F.tagnum = -1 ;
  G__KDetSimDictLN_TRandom.tagnum = -1 ;
  G__KDetSimDictLN_TGraph.tagnum = -1 ;
  G__KDetSimDictLN_TH3I.tagnum = -1 ;
  G__KDetSimDictLN_TH3F.tagnum = -1 ;
  G__KDetSimDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__KDetSimDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__KDetSimDictLN_TH2F.tagnum = -1 ;
  G__KDetSimDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__KDetSimDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__KDetSimDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__KDetSimDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__KDetSimDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__KDetSimDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__KDetSimDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__KDetSimDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__KDetSimDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__KDetSimDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__KDetSimDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__KDetSimDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__KDetSimDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__KDetSimDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__KDetSimDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__KDetSimDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__KDetSimDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__KDetSimDictLN_TVector3.tagnum = -1 ;
  G__KDetSimDictLN_KField.tagnum = -1 ;
  G__KDetSimDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__KDetSimDictLN_TFile.tagnum = -1 ;
  G__KDetSimDictLN_TROOT.tagnum = -1 ;
  G__KDetSimDictLN_KMaterial.tagnum = -1 ;
  G__KDetSimDictLN_KStruct.tagnum = -1 ;
  G__KDetSimDictLN_TF3.tagnum = -1 ;
  G__KDetSimDictLN_KGeometry.tagnum = -1 ;
  G__KDetSimDictLN_KDetector.tagnum = -1 ;
  G__KDetSimDictLN_KPad.tagnum = -1 ;
  G__KDetSimDictLN_K3D.tagnum = -1 ;
  G__KDetSimDictLN_KPixel.tagnum = -1 ;
  G__KDetSimDictLN_KStrip.tagnum = -1 ;
  G__KDetSimDictLN_KMesh.tagnum = -1 ;
  G__KDetSimDictLN_KImplant3D.tagnum = -1 ;
  G__KDetSimDictLN_KImplant2D.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableKDetSimDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN__RanitlEROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_iteratorlErandom_access_iterator_tagcOROOTcLcLTSchemaHelpercOlongcOROOTcLcLTSchemaHelpermUcOROOTcLcLTSchemaHelperaNgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN__RanitlETVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_iteratorlErandom_access_iterator_tagcOTVirtualArraymUcOlongcOTVirtualArraymUmUcOTVirtualArraymUaNgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLconst_iteratorgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TF1);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TH1D);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TH1F);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TRandom);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TGraph);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TH3I);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TH3F);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TH2F);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TVector3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__KDetSimDictLN_KField),sizeof(KField),-1,1280,(char*)NULL,G__setup_memvarKField,G__setup_memfuncKField);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TFile);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TROOT);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__KDetSimDictLN_KMaterial),sizeof(KMaterial),-1,1280,(char*)NULL,G__setup_memvarKMaterial,G__setup_memfuncKMaterial);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__KDetSimDictLN_KStruct),sizeof(KStruct),-1,1280,(char*)NULL,G__setup_memvarKStruct,G__setup_memfuncKStruct);
   G__get_linked_tagnum_fwd(&G__KDetSimDictLN_TF3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__KDetSimDictLN_KGeometry),sizeof(KGeometry),-1,34048,(char*)NULL,G__setup_memvarKGeometry,G__setup_memfuncKGeometry);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__KDetSimDictLN_KDetector),sizeof(KDetector),-1,34048,(char*)NULL,G__setup_memvarKDetector,G__setup_memfuncKDetector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__KDetSimDictLN_KPad),sizeof(KPad),-1,34048,(char*)NULL,G__setup_memvarKPad,G__setup_memfuncKPad);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__KDetSimDictLN_K3D),sizeof(K3D),-1,33792,(char*)NULL,G__setup_memvarK3D,G__setup_memfuncK3D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__KDetSimDictLN_KPixel),sizeof(KPixel),-1,33792,(char*)NULL,G__setup_memvarKPixel,G__setup_memfuncKPixel);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__KDetSimDictLN_KStrip),sizeof(KStrip),-1,34048,(char*)NULL,G__setup_memvarKStrip,G__setup_memfuncKStrip);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__KDetSimDictLN_KMesh),sizeof(KMesh),-1,33792,(char*)NULL,G__setup_memvarKMesh,G__setup_memfuncKMesh);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__KDetSimDictLN_KImplant3D),sizeof(KImplant3D),-1,33792,(char*)NULL,G__setup_memvarKImplant3D,G__setup_memfuncKImplant3D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__KDetSimDictLN_KImplant2D),sizeof(KImplant2D),-1,33792,(char*)NULL,G__setup_memvarKImplant2D,G__setup_memfuncKImplant2D);
}
extern "C" void G__cpp_setupKDetSimDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupKDetSimDict()");
  G__set_cpp_environmentKDetSimDict();
  G__cpp_setup_tagtableKDetSimDict();

  G__cpp_setup_inheritanceKDetSimDict();

  G__cpp_setup_typetableKDetSimDict();

  G__cpp_setup_memvarKDetSimDict();

  G__cpp_setup_memfuncKDetSimDict();
  G__cpp_setup_globalKDetSimDict();
  G__cpp_setup_funcKDetSimDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncKDetSimDict();
  return;
}
class G__cpp_setup_initKDetSimDict {
  public:
    G__cpp_setup_initKDetSimDict() { G__add_setup_func("KDetSimDict",(G__incsetup)(&G__cpp_setupKDetSimDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initKDetSimDict() { G__remove_setup_func("KDetSimDict"); }
};
G__cpp_setup_initKDetSimDict G__cpp_setup_initializerKDetSimDict;

